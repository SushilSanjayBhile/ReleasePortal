{"version":3,"sources":["views/Release/components/BasicReleaseInfo.js","components/ChatBox/ChatBox.js","views/Release/components/sunburst.model.js","views/Release/constants.js","views/Release/components/SunburstComponent.js","views/Release/ReleaseSummary/ReleaseSummary.js"],"names":["BasicReleaseInfo","props","_this","Object","_home_diamanti_release_portal_frontend_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_diamanti_release_portal_frontend_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_diamanti_release_portal_frontend_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","row","className","reactstrap__WEBPACK_IMPORTED_MODULE_10__","xs","lg","reactstrap__WEBPACK_IMPORTED_MODULE_11__","htmlFor","isEditing","reactstrap__WEBPACK_IMPORTED_MODULE_12__","type","id","name","placeholder","onChange","e","handleUpdate","TargetedReleaseDate","target","value","readOnly","basicReleaseInfo","TargetedCodeFreezeDate","TargetedQATestingDate","TargetedUpgradeTestingDate","reactstrap__WEBPACK_IMPORTED_MODULE_13__","FinalOS","UbootVersion","FinalDockerCore","Component","connect","ownProps","currentUser","auth","release","all","filter","item","ReleaseNumber","complementaryColors","oppositeColors","arcGenerator","arc","expander","innerRadius","outerRadius","d","parent","collapser","brandInfo","getStyle","brandDanger","cardChartData1","label","backgroundColor","borderColor","data","chartData","CustomTooltips","Math","min","apply","max","BOS","labels","datasets","borderWidth","NYNJ","COMMON","chartOptions","tooltips","enabled","custom","maintainAspectRatio","legend","display","scales","xAxes","gridLines","ticks","fontSize","fontColor","yAxes","elements","line","tension","point","radius","hitRadius","hoverRadius","stackedBarChartOptions","title","text","yAlign","responsive","barPercentage","stacked","beginAtZero","animation","onComplete","chartInstance","chart","ctx","textAlign","font","fillStyle","Chart","helpers","each","forEach","dataset","i","meta","controller","getDatasetMeta","bar","index","_model","x","base","fillText","y","pointLabelFontFamily","scaleFontFamily","Status","Fail","Pass","Warning","DeviceType","dev1","dev2","dev3","dev4","data1","ceil","data2","data3","random","floor","push","ReleaseSummary","classCallCheck","possibleConstructorReturn","getPrototypeOf","popoverToggle","setState","popoverOpen","popoverToggleGUI","popoverOpengui","toggle","modal","momToggle","momModal","tableApi","tcStrategy","tcSummary","releaseData","selectedPriority","selectedPriorityGUI","cntr","isReleaseStatusEditing","toggleModal","jenkinsBuildLink","totalBugsList","editReleaseStatusOptions","TABLE_OPTIONS","EDIT","basic","editOptions","editing","updated","open","qaStrategy","collapseOpen","SetupsUsed","Engineers","qaStatus","screen","tcStrategyTitleStyle","window","availWidth","position","top","left","fontWeight","color","tcSummaryTitleStyle","showFeatures","cardType","count","flexName","device","componentType","newProps","selectedRelease","initialize","axios","get","concat","then","res","getTCForStatuss","err","console","log","prevProps","prevState","_this3","newReleaseData","_this4","fixVersion","reset","temp","totalCount","totalBugs","saveFeatures","maxResults","parseInt","total","startAt","url","res1","length","saveBugs","showBugs","resolved","field","event","checked","select","val","obj","toConsumableArray","array","splice","indexOf","updateSelectedPriority","_this5","objectSpread","formattedDates","date","Date","toISOString","split","substring","formattedArrays","Array","isArray","ParentRelease","isNaN","QARateOfProgress","Priority","put","saveReleaseBasicInfo","location","reload","error","alert","dws","_this6","post","saveSingleFeature","history","TcAggregate","p","pGUI","map","Total","Skip","NotTested","Blocked","visibleP","visibleGUIP","PriorityGui","PriorityLabel","str","Tested","auto","manual","allGUI","GUI","All","NotApplicable","tcSummaryy","options","fontFamily","_this7","allCLI","needToRun","featuresCount","featuresStatusDict","Open","Resolved","Others","statusScenarios","feature","issues","fields","status","multiselect","Priorities","selected","includes","skipped","notApplicable","totalAutomated","react_default","Row","Col","sm","md","isAdmin","react","Button","size","onClick","Table","scroll","style","overflow","key","ActualReleaseDate","BuList","join","RelNum","ServerType","CardType","Customers","restrictEdit","KubernetesVersion","Runtime","HelmVersion","epicLink","Fragment","Input","defineProperty","undefined","_item","Collapse","isOpen","BuildNumber","Badge","cursor","statusPage","featureOpen","buildOpen","bugOpen","graphsOpen","maxWidth","width","class","bug","bugCount","keys","toLowerCase","toUpperCase","getFeatureDetails","self","summary","react_router_dom","to","borderTop","Automated","QAStartDate","QAEndDate","Progress","UpgradeMetrics","marginLeft","rows","wordBreak","borderRadius","UncontrolledPopover","trigger","placement","PopoverBody","dist_default","buttonClass","selectMultiselect","multiple","react_chartjs_2_es","height","FormGroup","Label","marginTop","marginBottom","Modal","ModalHeader","ModalBody","ModalFooter","save","margin-top","getCurrentRelease","current"],"mappings":"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","file":"static/js/28.d43cba5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nclass BasicReleaseInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Card>\n                    <CardHeader>\n                        Target Dates of Release\n                </CardHeader>\n                    <CardBody>\n                        <FormGroup row className=\"my-0\">\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetReleaseDate\">Release Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetReleaseDate\" name=\"targetReleaseDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedReleaseDate} /> :\n                                            <Input type=\"date\" id=\"targetReleaseDate\" name=\"targetReleaseDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedReleaseDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetCodeFreezeDate\">Code Freeze Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetCodeFreezeDate\" name=\"targetCodeFreezeDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedCodeFreezeDate} /> :\n                                            <Input type=\"date\" id=\"targetCodeFreezeDate\" name=\"targetCodeFreezeDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedCodeFreezeDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetQATestingDate\">QA Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetQATestingDate\" name=\"targetQATestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedQATestingDate} /> :\n                                            <Input type=\"date\" id=\"targetQATestingDate\" name=\"targetQATestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedQATestingDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetUpgradeTestingDate\">Upgrade Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetUpgradeTestingDate\" name=\"targetUpgradeTestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedUpgradeTestingDate} /> :\n                                            <Input type=\"date\" id=\"targetUpgradeTestingDate\" name=\"targetUpgradeTestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedUpgradeTestingDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n                <div>\n                    <Row>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"Operating System\">Operating System</Label>\n                                {\n                                    <Input type=\"text\" id=\"Operating\" name=\"Operating\" onChange={(e) => this.props.handleUpdate({ FinalOS: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"UBoot Number\">UBoot Number</Label>\n                                {\n\n                                    <Input type=\"text\" id=\"UbootVersion\" name=\"UbootVersion\" onChange={(e) => this.props.handleUpdate({ UbootVersion: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"Docker Core RPM Number\">Docker Core RPM Number</Label>\n                                {\n\n                                    <Input type=\"text\" id=\"FinalDockerCore\" name=\"FinalDockerCore\" onChange={(e) => this.props.handleUpdate({ FinalDockerCore: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state, ownProps) => ({\n    currentUser: state.auth.currentUser,\n    basicReleaseInfo: state.release.all.filter(item => {\n        if (item.ReleaseNumber === ownProps.id) {\n            return true;\n        } else {\n            return false;\n        }\n    })[0] //.filter(item => item.name === ownProps.match.params.id)\n})\n\nexport default connect(mapStateToProps, {})(BasicReleaseInfo);\n","import React, { Component } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n} from 'reactstrap';\nimport './ChatBox.scss';\nclass ChatBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chats: [\n                {\n                    user: '0',\n                    datetime: new Date(\"2015-03-25T12:00:00-06:00\"),\n                    message: `\n                    First Meeting\n                    `\n                },\n                {\n                    user: '1',\n                    datetime: new Date(\"2015-03-25T12:00:00-06:00\"),\n                    message: `\n                    Second Meeting\n                    `\n                },\n                {\n                    user: '1',\n                    datetime: new Date(\"2015-03-25T12:00:00-06:00\"),\n                    message: `\n                    Second\n                    `\n                },\n                {\n                    user: '1',\n                    datetime: new Date(\"2015-03-25T12:00:00-06:00\"),\n                    message: `\n                    Second\n                    `\n                }, {\n                    user: '1',\n                    datetime: new Date(\"2015-03-25T12:00:00-06:00\"),\n                    message: `\n                    Second\n                    `\n                }\n            ]\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Card className='rp-cb-dimensions'>\n                    <CardBody className='rp-cb-card-body'>\n                        {\n                            this.state.chats.map(item =>\n                                <div class='rp-cb-messages'>\n                                    <div class='rp-cb-user'>User: {item.user}</div>\n                                    <div class='rp-cb-datetime'>Date: {item.datetime.toString()}</div>\n                                    <div>{item.message}</div>\n                                </div>)\n                        }\n                    </CardBody>\n                </Card>\n            </div>\n        )\n    }\n}\nexport default ChatBox;","\nimport { arc } from 'd3';\n\n// export interface Details {\n//     name: Status;\n//     count: number;\n//     flexName: string;\n//     device: DeviceType;\n// }\n// export enum DeviceType {\n//     dev1 = 'dev1',\n//     dev2 = 'dev2',\n//     dev3 = 'dev3',\n//     dev4 = 'dev4'\n// }\n// export enum Status {\n//     Fail = 'Fail',\n//     Warning = 'Warning',\n//     Pass = 'Pass'\n// }\n// export interface SunburstData {\n//     data: any;\n//     componentType: DeviceType;\n// }\n// export class SunburstArcData {\n//     id: string;\n//     rule: Details;\n//     parent: string;\n//     color: string;\n//     startAngle: number;\n//     endAngle: number;\n//     innerRadius: number;\n//     outerRadius: number;\n// }\nexport const DetailsInfo = {\n    Fail: { color: '#ED6648', display: 'Fail' },\n    Warning: { color: '#F9D55B', display: 'Warning' },\n    Pass: { color: '#68C083', display: 'Pass' },\n    Total: { color: '#36A2EB', display: 'Total' },\n    // complementary 1 pair\n    Storage: { color: 'rgb(242,143,31)', display: 'Storage' },\n    Network: { color: 'rgb(32,114,178)', display: 'Network' },\n    Management: { color: 'rgb(195,25,126)', display: 'Management' },\n    Others: { color: 'rgb(140,189,63)', display: 'Others' },\n    // complementary 2 pair\n    // Storage: { color: 'rgb(253,199,15)', display: 'Storage' },\n    // Network: { color: 'rgb(66,78,155)', display: 'Network' },\n    // Management: { color: 'rgb(228,36,38)', display: 'Management' },\n    // Others: { color: 'rgb(10,144,93)', display: 'Others' },\n\n};\nexport const complementaryColors = [\n    'rgb(253,199,15)',\n    'rgb(242,142,31)',\n    'rgb(236,98,36)',\n    'rgb(228,36,38)',\n    'rgb(195,26,126)',\n    'rgb(110,57,141)',\n    'rgb(65,78,154)',\n    'rgb(32,114,178)',\n    'rgb(29,150,187)',\n    'rgb(10,144,93)',\n    'rgb(140,189,63)',\n    'rgb(240,230,12)',\n]\nexport const oppositeColors = [\n    'rgb(242,143,31)',\n    'rgb(195,25,126)',\n    'rgb(32,114,178)',\n    'rgb(140,189,63)'\n]\nexport const arcGenerator = arc();\nexport const innerarc = arc().innerRadius(30).outerRadius(35);\nexport const expander = arc()\n    .innerRadius(d => {\n        return (d.innerRadius = d.parent ? d.innerRadius : d.innerRadius);\n    })\n    .outerRadius(d => {\n        return (d.outerRadius += 10);\n    });\n\nexport const collapser = arc()\n    .innerRadius(d => {\n        return (d.innerRadius = d.parent ? d.innerRadius : d.innerRadius);\n    })\n    .outerRadius(d => {\n        return (d.outerRadius -= 10);\n    });\n","import { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { Chart } from 'react-chartjs-2';\nexport const brandPrimary = getStyle('--primary')\nexport const brandSuccess = getStyle('--success')\nexport const brandInfo = getStyle('--info')\nexport const brandDanger = getStyle('--danger')\nexport const brandPurple = getStyle('--purple')\n// Card Chart 1\nexport const cardChartData1 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: brandDanger,\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [65, 59, 84, 84, 51, 55, 40],\n        },\n    ],\n};\n\nexport const cardChartOpts1 = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {\n                    color: 'transparent',\n                    zeroLineColor: 'transparent',\n                },\n                ticks: {\n                    fontSize: 2,\n                    fontColor: 'transparent',\n                },\n\n            }],\n        yAxes: [\n            {\n                display: false,\n                ticks: {\n                    display: false,\n                    min: Math.min.apply(Math, cardChartData1.datasets[0].data) - 5,\n                    max: Math.max.apply(Math, cardChartData1.datasets[0].data) + 5,\n                },\n            }],\n    },\n    elements: {\n        line: {\n            borderWidth: 1,\n        },\n        point: {\n            radius: 4,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    }\n}\n\n// Card Chart 2\nexport const cardChartData2 = {\n    labels: ['02 Dec 2019', '09 Dec 2019', '16 Dec 2019', '23 Dec 2019', '30 Dec 2019'],\n    datasets: [\n        {\n            label: 'Weekly Progress',\n            backgroundColor: 'transparent',\n            // borderColor: 'rgba(255,255,255,.55)',\n            borderColor: brandInfo,\n            borderWidth: 5,\n            data: [1, 18, 9, 17, 34],\n        },\n    ],\n};\n\nexport const chartData = {\n    'BOS': {\n        labels: [\"4 November 2019\", \"11 November 2019\", \"18 November 2019\", \"25 November 2019\", \"4 December 2019\", \"9 December 2019\", \"17 December 2019\", \"23 December 2019\", \"30 December 2019\"],\n        datasets: [\n            {\n                label: 'Weekly Progress',\n                backgroundColor: 'transparent',\n                // borderColor: 'rgba(255,255,255,.55)',\n                borderColor: brandInfo,\n                borderWidth: 5,\n                data: [70.5, 74.05, 76.48, 81.79, 90.82, 93.88, 95.68, 98.63, 99.43],\n            },\n        ],\n    },\n    'NYNJ': {\n        labels: [\"4 November 2019\", \"11 November 2019\", \"18 November 2019\", \"25 November 2019\", \"4 December 2019\", \"9 December 2019\", \"17 December 2019\", \"23 December 2019\", \"30 December 2019\"],\n        datasets: [\n            {\n                label: 'Weekly Progress',\n                backgroundColor: 'transparent',\n                // borderColor: 'rgba(255,255,255,.55)',\n                borderColor: brandInfo,\n                borderWidth: 5,\n                data: [72.93, 74.61, 78.25, 82.11, 91.22, 94.42, 95.85, 98.88, 99.66],\n            },\n        ],\n    },\n    'COMMON': {\n        labels: [\"4 November 2019\", \"11 November 2019\", \"18 November 2019\", \"25 November 2019\", \"4 December 2019\", \"9 December 2019\", \"17 December 2019\", \"23 December 2019\", \"30 December 2019\"],\n        datasets: [\n            {\n                label: 'Weekly Progress',\n                backgroundColor: 'transparent',\n                // borderColor: 'rgba(255,255,255,.55)',\n                borderColor: brandInfo,\n                borderWidth: 5,\n                data: [75.65, 79.65, 85.64, 82.88, 88.78, 95.94, 97.50, 97.66, 99.06],\n            },\n        ],\n    },\n}\nexport const cardChartDataPurple = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'Weekly Progress',\n            backgroundColor: brandPurple,\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [1, 18, 9, 17, 34, 22, 11],\n        },\n    ],\n};\n\nexport const chartOptions = {\n    'BOS': {\n        tooltips: {\n            enabled: false,\n            custom: CustomTooltips\n        },\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n            // display: true\n        },\n        scales: {\n            xAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    ticks: {\n                        fontSize: 2,\n                        fontColor: '#00742b',\n                    },\n\n                }],\n            yAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    // display: false,\n                    ticks: {\n                        display: true,\n                        min: Math.min.apply(Math, chartData.BOS.datasets[0].data) - 5,\n                        max: Math.max.apply(Math, chartData.BOS.datasets[0].data) + 5,\n                        fontColor: '#00742b',\n                    },\n                }],\n        },\n        elements: {\n            line: {\n                tension: 0.00001,\n                borderWidth: 1,\n            },\n            point: {\n                radius: 4,\n                hitRadius: 10,\n                hoverRadius: 4,\n            },\n        },\n    },\n    'NYNJ': {\n        tooltips: {\n            enabled: false,\n            custom: CustomTooltips\n        },\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n            // display: true\n        },\n        scales: {\n            xAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    ticks: {\n                        fontSize: 2,\n                        fontColor: '#00742b',\n                    },\n\n                }],\n            yAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    // display: false,\n                    ticks: {\n                        display: true,\n                        min: Math.min.apply(Math, chartData.NYNJ.datasets[0].data) - 5,\n                        max: Math.max.apply(Math, chartData.NYNJ.datasets[0].data) + 5,\n                        fontColor: '#00742b',\n                    },\n                }],\n        },\n        elements: {\n            line: {\n                tension: 0.00001,\n                borderWidth: 1,\n            },\n            point: {\n                radius: 4,\n                hitRadius: 10,\n                hoverRadius: 4,\n            },\n        },\n    },\n    'COMMON': {\n        tooltips: {\n            enabled: false,\n            custom: CustomTooltips\n        },\n        maintainAspectRatio: false,\n        legend: {\n            display: false,\n            // display: true\n        },\n        scales: {\n            xAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    ticks: {\n                        fontSize: 2,\n                        fontColor: '#00742b',\n                    },\n\n                }],\n            yAxes: [\n                {\n                    gridLines: {},\n                    // gridLines: {\n                    //     color: '#00742b',\n                    //     zeroLineColor: '#00742b',\n                    // },\n                    // display: false,\n                    ticks: {\n                        display: true,\n                        min: Math.min.apply(Math, chartData.COMMON.datasets[0].data) - 5,\n                        max: Math.max.apply(Math, chartData.COMMON.datasets[0].data) + 5,\n                        fontColor: '#00742b',\n                    },\n                }],\n        },\n        elements: {\n            line: {\n                tension: 0.00001,\n                borderWidth: 1,\n            },\n            point: {\n                radius: 4,\n                hitRadius: 10,\n                hoverRadius: 4,\n            },\n        },\n    }\n}\nexport const cardChartOpts2 = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n        // display: true\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {},\n                // gridLines: {\n                //     color: '#00742b',\n                //     zeroLineColor: '#00742b',\n                // },\n                ticks: {\n                    fontSize: 2,\n                    fontColor: '#00742b',\n                },\n\n            }],\n        yAxes: [\n            {\n                gridLines: {},\n                // gridLines: {\n                //     color: '#00742b',\n                //     zeroLineColor: '#00742b',\n                // },\n                // display: false,\n                ticks: {\n                    display: true,\n                    min: Math.min.apply(Math, chartData.BOS.datasets[0].data) - 5,\n                    max: Math.max.apply(Math, chartData.BOS.datasets[0].data) + 5,\n                    fontColor: '#00742b',\n                },\n            }],\n    },\n    elements: {\n        line: {\n            tension: 0.00001,\n            borderWidth: 1,\n        },\n        point: {\n            radius: 4,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    },\n};\n\n\n// Card Chart 4\nexport const cardChartData4 = {\n    labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: 'rgba(255,255,255,.3)',\n            borderColor: 'transparent',\n            data: [78, 81, 80, 45, 34, 12, 40, 75, 34, 89, 32, 68, 54, 72, 18, 98],\n        },\n    ],\n};\n\nexport const cardChartOpts4 = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                display: false,\n                barPercentage: 0.6,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n};\n// Card Chart 3\nexport const cardChartData3 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: 'rgba(255,255,255,.2)',\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [78, 81, 80, 45, 34, 12, 40],\n        },\n    ],\n};\n\nexport const cardChartOpts3 = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                display: false,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n    elements: {\n        line: {\n            borderWidth: 2,\n        },\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    },\n};\n\nexport const stackedBarChart = {\n    labels: ['Domains (Total: 1100)', 'GUI (Total: 1500)'],\n    datasets: [{\n        label: 'Pass',\n        backgroundColor: '#01D251',\n        borderColor: 'white',\n        borderWidth: 1,\n        data: [10, 600]\n    },\n    {\n        label: 'Blocked',\n        backgroundColor: '#FFCE56',\n        borderColor: 'white',\n        borderWidth: 1,\n        data: [300, 300]\n    },\n    {\n        label: 'Fail',\n        backgroundColor: '#d9534f',\n        borderColor: 'white',\n        borderWidth: 1,\n        data: [300, 400]\n    },\n    {\n        label: 'Not Tested',\n        backgroundColor: 'rgba(128,128,128,0.3)',\n        borderColor: 'white',\n        borderWidth: 1,\n        data: [300, 200]\n    },\n    ]\n}\n\nexport const stackedBarChartOptions = {\n    title: {\n        display: false,\n        text: '80%'\n    },\n    tooltips: {\n        yAlign: 'above'\n    },\n    maintainAspectRatio: false,\n    responsive: true,\n    scales: {\n        xAxes: [{\n            barPercentage: 0.4,\n            stacked: true,\n            gridLines: {},\n            ticks: {\n                beginAtZero: true,\n                fontSize: 14\n            },\n        }],\n        yAxes: [{\n            barPercentage: 0.4,\n            stacked: true,\n            gridLines: {\n                display: false,\n                text:'abc'\n                // color: '#fff',\n                // lineColor: '#fff',\n                // zeroLineColor: '#fff',\n                // zeroLineWidth: 0\n            },\n            ticks: {\n                fontSize: 14\n            },\n        }],\n    },\n    legend: {\n        display: false\n    },\n    animation: {\n        onComplete: function () {\n            var chartInstance = this.chart;\n            var ctx = chartInstance.ctx;\n            ctx.textAlign = \"left\";\n            ctx.text = 'a'\n            ctx.font = \"14px Open Sans\";\n            ctx.fillStyle = \"rgb(4, 56, 26)\";\n\n            Chart.helpers.each(this.data.datasets.forEach(function (dataset, i) {\n                var meta = chartInstance.controller.getDatasetMeta(i);\n                Chart.helpers.each(meta.data.forEach(function (bar, index) {\n                    let data = dataset.data[index];\n                    if (bar._model.x - bar._model.base > 50) {\n                        ctx.fillText(data, bar._model.x - 30, bar._model.y + 4);\n                    }\n\n                    // }\n                }), this)\n            }), this);\n        }\n    },\n    pointLabelFontFamily: \"Quadon Extra Bold\",\n    scaleFontFamily: \"Quadon Extra Bold\",\n}","import React, { Component } from 'react';\nimport { arc, select, interpolate } from 'd3';\nimport { Button } from 'reactstrap'\nimport { DetailsInfo, arcGenerator, expander, collapser, complementaryColors, oppositeColors } from './sunburst.model';\nimport './SunburstComponent.scss';\nclass SunburstComponent extends Component {\n    // @Input() data: SunburstData;\n    // @ViewChild('gElement') gElement: ElementRef;\n    dataMissing = {};\n    cntr = 0;\n    mouseHover = false;\n\n    componentWillReceiveProps(newProps) {\n        if (this.props.data && this.props.data.data && this.props.data.componentType) {\n            setTimeout(() => this.generateArcs(this.props.data.data, this.props.data.componentType), 100)\n        }\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Button onClick={() => console.log('called')}></Button>\n                <svg viewBox=\"0 0 300 300\" preserveAspectRatio=\"none\" width=\"100%\">\n                    <text\n                        className={!this.props.data || !this.props.data.componentType || this.dataMissing[this.props.data.componentType] ? 'app-sunburst-show' : 'app-sunburst-hidden'}\n                        x=\"75\" y=\"140\" font-family=\"sans-serif\" font-size=\"20px\"\n                        fill=\"red\">No records found</text>\n                    <g ref=\"gElement\" transform=\"translate(150,150)\"></g>\n                </svg >\n                {\n                    this.props.data && this.props.data.componentType &&\n                    <div class=\"app-sunburst-label\" > {this.props.data.componentType} </div>\n                }\n            </React.Fragment >\n        )\n    }\n    generateArcs(data, title) {\n        this.colors = complementaryColors;\n        if (this.props.data.data.length <= oppositeColors.length) {\n            this.colors = oppositeColors;\n        }\n        const selectedG = select(this.refs.gElement);\n        let arcId = 0;\n        const textData = [{\n            id: 'flexText' + title,\n            text: '',\n            translate: 15\n        },\n        {\n            id: 'valText' + title,\n            text: '',\n            translate: -15\n        }]\n\n        selectedG\n            .selectAll('path')\n            .remove();\n        let total = 0;\n        const ruleTotal = {};\n        let initAngle = 0;\n        let arcData = [];\n        data.forEach(rule => {\n            total += rule.count;\n            ruleTotal[rule.name] = ruleTotal[rule.name]\n                ? ruleTotal[rule.name] + rule.count\n                : rule.count;\n        });\n        // if total is greater than 0\n        if (total === 0) {\n            this.dataMissing[title] = true;\n            return;\n        }\n        this.dataMissing[title] = false;\n\n        total = 2 * Math.PI / total;\n        // inner ring\n        initAngle = 0;\n        Object.keys(ruleTotal).forEach((key, index) => {\n            // keys = FAIL, WARNING, PASS\n            const endAngle = initAngle + ruleTotal[key] * total;\n            arcData.push({\n                id: title + 'innerarc' + key,\n                // color: DetailsInfo[key].color,\n                color: this.colors[index],\n                startAngle: initAngle,\n                endAngle: endAngle,\n                innerRadius: 80,\n                outerRadius: 85\n            })\n            initAngle = endAngle;\n        });\n\n        // outer radius\n        initAngle = 0;\n        const list = {};\n        Object.keys(ruleTotal).forEach(key => {\n            list[key] = data.filter(itm => itm.name === key);\n        });\n        Object.keys(list).forEach(ruleName =>\n            list[ruleName].forEach(rule => {\n                // rule.names = FAIL, WARNING, PASS\n                const endAngle = initAngle + rule.count * total;\n                // arcData.push({\n                //     id: title + 'arc' + arcId++,\n                //     rule: rule,\n                //     parent: title + 'arc' + rule.name,\n                //     color: DetailsInfo[rule.name].color,\n                //     startAngle: initAngle,\n                //     endAngle: endAngle,\n                //     innerRadius: 100,\n                //     outerRadius: 140\n                // })\n                initAngle = endAngle;\n            })\n        );\n\n        // inner radius\n        initAngle = 0;\n        Object.keys(ruleTotal).forEach((key, index) => {\n            // keys = FAIL, WARNING, PASS\n            const endAngle = initAngle + ruleTotal[key] * total;\n            arcData.push({\n                id: title + 'arc' + key,\n                rule: {\n                    name: key,\n                    count: ruleTotal[key],\n                    flexName: undefined\n                },\n                parent: undefined,\n                // color: DetailsInfo[key].color,\n                color: this.colors[index],\n                startAngle: initAngle,\n                endAngle: endAngle,\n                innerRadius: 80,\n                outerRadius: 100\n            })\n            initAngle = endAngle;\n        });\n        arcData = Object.assign([], arcData);\n\n        selectedG\n            .selectAll('path')\n            .data(arcData)\n            .enter()\n            .append('path')\n            .attr('id', d => d.id)\n            .attr('d', arcGenerator)\n            .attr('fill', d => d.color)\n            .attr('stroke', '#fff')\n            .attr('stroke-width', 1)\n            .on('mouseover', d => {\n                selectedG\n                    .selectAll('path')\n                    .style('opacity', 0.8)\n                if (!d.id.includes('inner')) {\n                    this.mouseHover = true;\n                    if (d.parent) {\n                        select('#' + d.parent)\n                            .transition()\n                            .delay(100)\n                            .attr('d', expander)\n                            .style('opacity', 1.0)\n                    }\n                    select('#' + d.id)\n                        .transition()\n                        .delay(100)\n                        .attr('d', expander)\n                        .style('opacity', 1.0);\n\n                    select('#flexText' + title)\n                        .text((flex) => d.rule.flexName ? d.rule.flexName : 'Total')\n                        .style('fill', '#888888')\n                        .style('font-size', '20px')\n                        .style('opacity', 1)\n\n                    select('#valText' + title)\n                        .text((val) => d.rule.count + '')\n                        .style('fill', '#565656')\n                        .style('font-size', '48px')\n                        .style('opacity', 1)\n                } else {\n                    select('#' + d.id)\n                        .style('opacity', 1.0)\n                }\n            })\n            .on('mouseout', d => {\n                select('#flexText' + title)\n                    .text((flex) => d.rule.flexName ? d.rule.flexName : 'Total')\n                    .style('opacity', 0);\n\n                select('#valText' + title)\n                    .text((val) => d.rule.count + '')\n                    .style('opacity', 0);\n\n                selectedG\n                    .selectAll('path')\n                    .style('opacity', 1.0)\n                if (!d.id.includes('inner')) {\n                    this.mouseHover = false;\n                    if (d.parent) {\n\n                        select('#' + d.parent)\n                            .transition()\n                            .delay(100)\n                            .attr('d', collapser);\n                    }\n\n                    select('#' + d.id)\n                        .transition()\n                        .delay(100)\n                        .attr('d', collapser);\n                }\n            })\n            .on('click', d => {\n                this.props.sectionSelect(d);\n            })\n        // .transition()\n        // .delay(function (d, i) {\n        //     return i * 800;\n        // })\n        // .attrTween('d', function (d) {\n        //     var i = interpolate(d.startAngle + 0.1, d.endAngle);\n        //     return function (t) {\n        //         d.endAngle = i(t);\n        //         return arc(d);\n        //     }\n        // })\n\n        selectedG\n            .selectAll('text')\n            .data(textData)\n            .enter()\n            .append('text')\n            .attr('id', d => d.id)\n            .attr('transform', function (d) {\n                return 'translate(0,' +\n                    d.translate\n                    + ')';\n            })\n            .attr('dy', d => {\n                if (d.id.includes('flex')) {\n                    return '1.0em'\n                } else { return '0.2em' }\n            })\n            .attr('text-anchor', 'middle')\n            .text((d) => d.text)\n            .style('font-size', '48px')\n            .style('opacity', 1)\n            .style('fill', '#0000')\n            .style('font-size', '20px')\n    }\n}\n\nexport default SunburstComponent;","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport {\n    Button,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Modal, ModalHeader, ModalBody, ModalFooter, Table, Collapse, Progress, Badge,\n    UncontrolledPopover, PopoverBody,\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { updateSelectedPriority, saveReleaseBasicInfo, saveFeatures, saveBugs, saveSingleFeature, statusPage } from '../../../actions';\nimport { getCurrentRelease, getDomainStatus } from '../../../reducers/release.reducer';\nimport { getTCForStatus, getTCForStrategy } from '../../../reducers/release.reducer';\nimport BasicReleaseInfo from '../components/BasicReleaseInfo';\nimport ChatBox from '../../../components/ChatBox/ChatBox';\nimport AppTable from '../../../components/AppTable/AppTable';\nimport './ReleaseSummary.scss';\nimport { Bar, Doughnut, Line, Pie, Polar, Radar, HorizontalBar } from 'react-chartjs-2';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { TABLE_OPTIONS } from '../../../constants';\nimport { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities';\nimport SunburstComponent from '../components/SunburstComponent';\nimport { cardChartOpts2, cardChartData2, chartData, chartOptions, stackedBarChart, stackedBarChartOptions } from '../constants';\nimport Multiselect from 'react-bootstrap-multiselect';\nconst brandPrimary = getStyle('--primary')\nconst brandSuccess = getStyle('--success')\nconst brandInfo = getStyle('--info')\nconst brandWarning = getStyle('--warning')\nconst brandDanger = getStyle('--danger')\n//  TODO: dates after updating only while displaying are wrong in release summary\nconst Status = {\n    Fail: 'Fail',\n    Pass: 'Pass',\n    Warning: 'Warning'\n}\nconst DeviceType = {\n    dev1: 'dev1',\n    dev2: 'dev2',\n    dev3: 'dev3',\n    dev4: 'dev4'\n}\nconst options = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips\n    },\n    maintainAspectRatio: false\n}\nconst mainChartOpts = {\n    tooltips: {\n        enabled: false,\n        custom: CustomTooltips,\n        intersect: true,\n        mode: 'index',\n        position: 'nearest',\n        callbacks: {\n            labelColor: function (tooltipItem, chart) {\n                return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n            }\n        }\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {\n                    drawOnChartArea: false,\n                },\n            }],\n        yAxes: [\n            {\n                ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                },\n            }],\n    },\n    elements: {\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n        },\n    },\n};\n\nvar elements = 12;\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\nfunction random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfor (var i = 0; i <= elements; i++) {\n    data1.push(random(50, 200));\n    data2.push(random(80, 100));\n    data3.push(65);\n}\n\n// var Client = require('node-rest-client').Client;\n// client = new Client();\n// const express = require('express');\n// const jsonfile = require('jsonfile')\n// var jiraHeaders = null;\n// var searchArgs = null;\n// var searchArgs = {\n//     headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\": \"Basic YWNoYXZhbkBkaWFtYW50aS5jb206Y2VtRDF5UW1ySTIweFNCSWQwUU9DODgw\"\n//     }\n// }\n\n// var JIRA_URL = 'https://diamanti.atlassian.net'\n// const app = express();\n\n\n\nvar releaseData = '';\nclass ReleaseSummary extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tableApi : false,\n            release:{},\n            tcStrategy:{},\n            tcSummary:[],\n            releaseData:'',\n            selectedPriority: ['P0', 'P1'],\n            selectedPriorityGUI: ['P0', 'P1'],\n            cntr: 0,\n            isEditing: false,\n            isReleaseStatusEditing: false,\n            modal: false,\n            toggleModal: false,\n            jenkinsBuildLink: '',\n            totalBugsList:[],\n            editReleaseStatusOptions: [TABLE_OPTIONS.EDIT],\n            basic: { editOptions: [TABLE_OPTIONS.EDIT], editing: false, updated: {}, open: false },\n            qaStrategy: { editOptions: [TABLE_OPTIONS.EDIT], editing: false, updated: {}, open: false, collapseOpen: { SetupsUsed: false, Engineers: false } },\n            qaStatus: { editOptions: [TABLE_OPTIONS.EDIT], editing: false, updated: {}, open: false },\n            screen: {\n                tcStrategyTitleStyle: window.screen.availWidth > 1400 ?\n                    { position: 'absolute', top: '30%', left: '47%', textAlign: 'center', fontSize: '20px', fontWeight: 600, color: '#00742b' } :\n                    { position: 'absolute', top: '30%', left: '46%', textAlign: 'center', fontSize: '16px', fontWeight: 600, color: '#00742b' },\n                tcSummaryTitleStyle: window.screen.availWidth > 1400 ?\n                    { position: 'absolute', top: '21%', left: '34%', textAlign: 'center', fontSize: '13px', fontWeight: 600, color: '#003168' } :\n                    { position: 'absolute', top: '38%', left: '29%', textAlign: 'center', fontSize: '13px', fontWeight: 600, color: '#003168' },\n            },\n            showFeatures: false,\n            cardType: 'BOS',\n            data: {\n                data: [\n                    {\n                        'name': Status.Fail,\n                        'count': 20,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev1\n                    },\n                    {\n                        'name': Status.Warning,\n                        'count': 0,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev1\n                    },\n                    {\n                        'name': Status.Pass,\n                        'count': 21,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev1\n                    },\n                    {\n                        'name': Status.Fail,\n                        'count': 8,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev2\n                    },\n                    {\n                        'name': Status.Warning,\n                        'count': 0,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev2\n                    },\n                    {\n                        'name': Status.Pass,\n                        'count': 6,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev2\n                    },\n                    {\n                        'name': Status.Fail,\n                        'count': 21,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev3\n                    },\n                    {\n                        'name': Status.Warning,\n                        'count': 16,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev3\n                    },\n                    {\n                        'name': Status.Pass,\n                        'count': 40,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev3\n                    },\n                    {\n                        'name': Status.Fail,\n                        'count': 0,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev4\n                    },\n                    {\n                        'name': Status.Warning,\n                        'count': 0,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev4\n                    },\n                    {\n                        'name': Status.Pass,\n                        'count': 0,\n                        'flexName': 'testA',\n                        'device': DeviceType.dev4\n                    },\n                ],\n                componentType: 'dev1'\n            }\n        }\n    }\n    componentWillReceiveProps(newProps) {\n        if(this.props.selectedRelease && newProps.selectedRelease && this.props.selectedRelease.ReleaseNumber !== newProps.selectedRelease.ReleaseNumber) {\n            this.initialize(newProps.selectedRelease.ReleaseNumber,newProps.selectedRelease);\n            // this.initialize(newProps.selectedRelease);\n            this.setState({\n                releaseData : newProps.selectedRelease\n            })\n        }\n    }\n    componentDidMount() {\n        this.initialize(this.props.selectedRelease.ReleaseNumber, this.props.selectedRelease)\n        axios.get(`/api/release_all_info/releaseName/${this.props.selectedRelease.ReleaseNumber}`)\n                .then(res => {\n                    this.setState({release:res.data, tableApi: true},() => {this.getTCForStatuss()} )\n                }, err => {\n                    console.log('err ', err);\n                });\n        //this.initialize(this.props.selectedRelease.ReleaseNumber);\n        // this.initialize(this.props.selectedRelease);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        //let release = this.props.selectedRelease.ReleaseNumber ? this.props.selectedRelease.ReleaseNumber : null\n        if (prevProps.selectedRelease.ReleaseNumber !== this.props.selectedRelease.ReleaseNumber) {\n            this.setState({tableApi: false})\n            this.initialize(this.props.selectedRelease.ReleaseNumber, this.props.selectedRelease)\n            axios.get(`/api/release_all_info/releaseName/${this.props.selectedRelease.ReleaseNumber}`)\n                .then(res => {\n                    this.setState({release:res.data, tcSummary: {}, tableApi: true},() => {this.getTCForStatuss()})\n                }, err => {\n                    console.log('err ', err);\n                });\n        }\n        //this.initialize(this.props.selectedRelease.ReleaseNumber);\n        //this.initialize(this.props.selectedRelease);\n    }\n\n    initialize(release,newReleaseData) {\n\n        let fixVersion = newReleaseData.fixVersion;\n        this.reset();\n        // let temp = release.ReleaseNumber;;\n        let temp = release;\n        let totalCount = 0\n        let maxResults = 0\n        let totalBugs = []\n\n        if(temp === 'Spektra 2.4') {\n            temp='2.4.0'\n        }\n        if(temp === 'DMC-3.0') {\n            temp=\"\\\"Spektra 3.0\\\"\"\n        }\n        if(temp === 'DSS-3.1') {\n            temp = \"3.1.0\"\n        }\n        if(temp === 'Overlay-3.1' || temp === 'OCP-4.5') {\n            temp = \"\\\"Spek 3.1.0\\\"\"\n        }\n\n        fixVersion = \"\\\"\" + fixVersion + \"\\\"\"\n\n        // if(release === 'DSS-3.1'){\n        //     axios.get('/rest/DSSepic/' + temp)\n        //     .then(res => {\n        //         console.log(\"DSS epic\",res.data)\n        //         this.props.saveFeatures({ data: res.data, id: release })\n        //         this.setState({ showFeatures: true })\n        //     }, err => {\n        //         console.log('err ', err);\n        //     });\n        // }\n        // console.log(\"Currrent Selected release number\",this.props.selectedRelease.ReleaseNumber,this.props.selectedRelease.fixVersion)\n        if(release === 'DMC-3.0'){\n            // axios.get('/rest/epic/' + temp)\n            axios.get('/rest/epic/' + fixVersion)\n            .then(res => {\n                this.props.saveFeatures({ data: res.data, id: release })\n                this.setState({ showFeatures: true })\n            }, err => {\n                console.log('err ', err);\n            });\n        }\n        else{\n\n            // axios.get('/rest/features/' + temp)\n            axios.get('/rest/features/' + fixVersion)\n            .then(res => {\n                this.props.saveFeatures({ data: res.data, id: release })\n                this.setState({ showFeatures: true })\n            }, err => {\n                console.log('err ', err);\n            });\n\n        }\n\n        // Function to get list of all bugs\n        // axios.get('/rest/bugs/total/' + temp)\n        axios.get('/rest/bugs/total/' + fixVersion)\n            .then(res => {\n                totalBugs = res;\n                maxResults = res.data.maxResults\n                totalCount = parseInt(res.data.total/res.data.maxResults)\n                let startAt = 0\n\n                for(let i = 0; i < totalCount ; i++){\n                    startAt = startAt + res.data.maxResults\n                    // let url = '/rest/bugs/totalCount/'  + temp + \"/\" + startAt\n                    let url = '/rest/bugs/totalCount/'  + fixVersion + \"/\" + startAt\n                    axios.get(url).then(res1=>{\n                        for(let i = 0 ;i < res1['data']['issues'].length ;i++){\n                            totalBugs['data']['issues'].push(res1['data']['issues'][i])\n                        }\n                    })\n                }\n                this.props.saveBugs({ data: { total: totalBugs.data.total, all: totalBugs.data }, id: release })\n                this.setState({ showBugs: true, cntr: 2 })\n            }, err => {\n                console.log('err ', err);\n            })\n            // axios.get('/rest/bugs/open/' + temp)\n            axios.get('/rest/bugs/open/' + fixVersion)\n            .then(res => {\n                this.props.saveBugs({ data: { open: res.data.total }, id: release })\n                this.setState({ showBugs: true, cntr: 4 })\n\n            }, err => {\n                console.log('err ', err);\n            })\n        // axios.get('/rest/bugs/resolved/' + temp)\n        axios.get('/rest/bugs/resolved/' + fixVersion)\n            .then(res => {\n                this.props.saveBugs({ data: { resolved: res.data.total }, id: release})\n                this.setState({ showBugs: true, cntr: 6 })\n\n            }, err => {\n                console.log('err ', err);\n            })\n\n    }\n\n    edit() {\n        this.setState({ isEditing: true });\n    }\n    reset() {\n        this.setState({\n            isEditing: false,\n            isReleaseStatusEditing: false,\n            modal: false,\n            toggleModal: false,\n            jenkinsBuildLink: '',\n            editReleaseStatusOptions: [TABLE_OPTIONS.EDIT],\n            basic: { editOptions: [TABLE_OPTIONS.EDIT], editing: false, updated: {} },\n            qaStrategy: { editOptions: [TABLE_OPTIONS.EDIT], editing: false, updated: {}, open: false, collapseOpen: { SetupsUsed: false, Engineers: false } }\n\n        });\n    }\n    selectMultiselect(field, event, checked, select) {\n        let value = event.val();\n                let obj = null;\n                if (checked && this.state.selectedPriority) {\n                    obj = [...this.state.selectedPriority, value];\n                }\n                if (checked && !this.state.selectedPriority) {\n                    obj = [value];\n                }\n                if (!checked && this.state.selectedPriority) {\n                    let array = this.state.selectedPriority;\n                    array.splice(array.indexOf(value), 1);\n                    obj = array;\n                }\n                this.props.updateSelectedPriority({selectedPriority: obj});\n                this.setState({ selectedPriority: obj  },this.getTCForStatuss);\n    }\n    popoverToggle = () => this.setState({ popoverOpen: !this.state.popoverOpen});\n    popoverToggleGUI = () => this.setState({ popoverOpengui: !this.state.popoverOpengui});\n    save() {\n        let data = { ...this.props.selectedRelease, ...this.state.basic.updated, ...this.state.qaStrategy.updated }\n        let dates = [\n            'TargetedReleaseDate', 'ActualReleaseDate', 'TargetedCodeFreezeDate',\n            'UpgradeTestingStartDate', 'QAStartDate', 'QAEndDate', 'ActualCodeFreezeDate', 'TargetedQAStartDate'\n        ]\n        let formattedDates = {};\n\n        dates.forEach(item => {\n            if (data[item]) {\n                let date = new Date(data[item]).toISOString().split('T');\n                formattedDates[item] = `${date[0]} ${date[1].substring(0, date[1].length - 1)}`;\n            }\n        })\n        data = { ...data, ...formattedDates };\n        let arrays = [\n            'ServerType', 'CardType', 'BuildNumberList', 'SetupsUsed', 'UpgradeMetrics', 'Customers', 'Engineers', 'BuList', 'Runtime'\n        ]\n        let formattedArrays = {};\n\n        arrays.forEach(item => {\n            if (!data[item]) {\n                formattedArrays[item] = [];\n            }\n            if (data[item] && !Array.isArray(data[item])) {\n                formattedArrays[item] = data[item].split(',');\n            }\n        })\n        data.ParentRelease = this.props.ParentRelease\n        data = { ...data, ...formattedArrays };\n        if (isNaN(data.QARateOfProgress)) {\n            data.QARateOfProgress = 0;\n        } else {\n            data.QARateOfProgress = parseInt(data.QARateOfProgress);\n        }\n        if (!data.QARateOfProgress) {\n            data.QARateOfProgress = 0;\n        }\n        data.Priority = 'P0' // if not set then giving error to update basic info\n        axios.put(`/api/release/${this.props.selectedRelease.ReleaseNumber}`, { ...data })\n            .then(res => {\n                this.props.saveReleaseBasicInfo({ id: data.ReleaseNumber, data: data });\n                this.reset();\n                window.location.reload()\n                // this.history.push('/release/summary')\n            }, error => {\n                alert('error in updating');\n            });\n        if (this.state.modal) {\n            this.toggle();\n        }\n        if (this.state.momModal) {\n            this.momToggle();\n        }\n    }\n    toggle = () => this.setState({ modal: !this.state.modal },()=>{\n\n    });\n    momToggle = () => this.setState({ momModal: !this.state.momModal });\n    getFeatureDetails(dws) {\n        axios.post('/rest/featuredetail', { data: dws }).then(res => {\n            this.props.saveSingleFeature({ data: res.data });\n            this.props.history.push('/release/status')\n        }, err => {\n\n        })\n    }\n    //  componentDidMount(){\n    //  }\n    getTCForStatuss() {\n        if (!this.state.release) {\n            return;\n        }\n        if (!this.state.release.TcAggregate) {\n            return;\n        }\n        let p = {};\n        let pGUI = {};\n        ['P0', 'P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7'].map(item => p[item] = { Total:0,Pass: 0, Skip: 0, Fail: 0, NotTested: 0,Blocked:0 });\n        ['P0', 'P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7'].map(item => pGUI[item] = { Total:0,Pass: 0, Skip: 0, Fail: 0, NotTested: 0,Blocked:0 });\n        let visibleP = { Total:0,Pass: 0, Skip: 0, Fail: 0, NotTested: 0 ,Blocked:0};\n        let visibleGUIP = { Total:0,Pass: 0, Skip: 0, Fail: 0, NotTested: 0 ,Blocked:0};\n        if (this.state.release.TcAggregate.Priority) {\n            p = { ...p, ...this.state.release.TcAggregate.Priority }\n        }\n        //let pGUI = {}\n        if (this.state.release.TcAggregate.PriorityGui) {\n            pGUI = { ...pGUI, ...this.state.release.TcAggregate.PriorityGui}\n        }\n        if (this.state.selectedPriority) {\n            this.state.selectedPriority.forEach(item => {\n                visibleP.Pass += p[item].Pass;\n                visibleP.Skip += p[item].Skip;\n                visibleP.Fail += p[item].Fail;\n                visibleP.NotTested += p[item].NotTested;\n                visibleP.Blocked += p[item].Blocked;\n            })\n        }\n        if(this.state.selectedPriority){\n            //if (this.props.selectedRelease.ReleaseNumber == \"DMC-3.0\" || this.props.selectedRelease.ReleaseNumber == \"DMC Master\" ) {\n                this.state.selectedPriority.forEach(item => {\n                    //if(item){\n                        visibleGUIP.Pass += pGUI[item].Pass;\n                        visibleGUIP.Skip += pGUI[item].Skip;\n                        visibleGUIP.Fail += pGUI[item].Fail;\n                        visibleGUIP.NotTested += pGUI[item].NotTested;\n                        visibleGUIP.Blocked += pGUI[item].Blocked;\n                    //}\n                })\n            //}\n        }\n        let PriorityLabel = this.state.selectedPriority;\n        let str = \"\"\n        if(this.props.selectedRelease.ReleaseNumber == \"DCX-3.0\"){\n            str = \"P0\"\n        }\n        else{\n            for(let i=0;i<PriorityLabel.length;i++){\n                str += PriorityLabel[i] + \" \"\n            }\n        }\n        let data = [{\n            labels: ['Total', str],\n            datasets: [\n            {\n                label: 'Pass',\n                backgroundColor: '#01D251',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [(this.state.release.TcAggregate.all.Tested.auto.Pass + this.state.release.TcAggregate.all.Tested.manual.Pass), visibleP.Pass]\n            },\n            // {\n            //     label: 'Skipped (Testing)',\n            //     backgroundColor: '#FFCE56',\n            //     borderColor: 'white',\n            //     borderWidth: 1,\n            //     data: [(release.TcAggregate.all.Tested.auto.Skip + release.TcAggregate.all.Tested.manual.Skip), visibleP.Skip]\n            // },\n            {\n                label: 'Fail',\n                backgroundColor: '#d9534f',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [(this.state.release.TcAggregate.all.Tested.auto.Fail + this.state.release.TcAggregate.all.Tested.manual.Fail), visibleP.Fail]\n            },\n            {\n                label: 'Not Tested',\n                backgroundColor: 'rgba(128,128,128,0.3)',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [this.state.release.TcAggregate.all.NotTested, visibleP.NotTested]\n            },\n            {\n                label: 'Blocked',\n                backgroundColor: '#d9534f',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [this.state.release.TcAggregate.all.Blocked, visibleP.Blocked]\n            },\n            ]\n        }];\n        data.push({\n            labels: ['Total', str],\n            datasets: [\n            {\n                label: 'Pass',\n                backgroundColor: '#01D251',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [(this.state.release.TcAggregate.allGUI.Pass), visibleGUIP.Pass]\n            },\n            // {\n            //     label: 'Skipped (Testing)',\n            //     backgroundColor: '#FFCE56',\n            //     borderColor: 'white',\n            //     borderWidth: 1,\n            //     data: [(release.TcAggregate.allGUI.SkippedWhileTesting), visibleGUIP.Skip]\n            // },\n            {\n                label: 'Fail',\n                backgroundColor: '#d9534f',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [(this.state.release.TcAggregate.allGUI.Fail), visibleGUIP.Fail]\n            },\n            {\n                label: 'Not Tested',\n                backgroundColor: 'rgba(128,128,128,0.3)',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [this.state.release.TcAggregate.allGUI.NotTested, visibleGUIP.NotTested]\n            },\n            {\n                label: 'Blocked',\n                backgroundColor: '#d9534f',\n                borderColor: 'white',\n                borderWidth: 1,\n                data: [this.state.release.TcAggregate.allGUI.Blocked, visibleGUIP.Blocked]\n            },\n            ]\n        })\n        if (this.props.selectedRelease.ReleaseNumber === '2.3.0') {\n            data.push({\n                labels: [''],\n                datasets: [{\n                    label: 'Pass',\n                    backgroundColor: '#01D251',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [3643]\n                },\n                // {\n                //     label: 'Skipped (Testing)',\n                //     backgroundColor: '#FFCE56',\n                //     borderColor: 'white',\n                //     borderWidth: 1,\n                //     data: [0]\n                // },\n                {\n                    label: 'Fail',\n                    backgroundColor: '#d9534f',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [189]\n                },\n                {\n                    label: 'Not Tested',\n                    backgroundColor: 'rgba(128,128,128,0.3)',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [0]\n                },\n                ]\n            })\n        } else {\n            data.push({\n                labels: [''],\n                datasets: [{\n                    label: 'Pass',\n                    backgroundColor: '#01D251',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [0]\n                },\n                {\n                    label: 'Skipped (Testing)',\n                    backgroundColor: '#FFCE56',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [0]\n                },\n                {\n                    label: 'Fail',\n                    backgroundColor: '#d9534f',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [0]\n                },\n                {\n                    label: 'Not Tested',\n                    backgroundColor: 'rgba(128,128,128,0.3)',\n                    borderColor: 'white',\n                    borderWidth: 1,\n                    data: [this.state.release.TcAggregate.all.GUI]\n                    // data: [0]\n                },\n                ]\n            })\n        }\n        const options = {\n            legend: {\n                position: 'right',\n                display: true,\n                labels: {\n                    fontColor: '#003168',\n                    fontFamily: 'Open Sans, sans-serif',\n                }\n            },\n        }\n        let total = [this.state.release.TcAggregate.all.All - (this.state.release.TcAggregate.all.NotApplicable + this.state.release.TcAggregate.all.Skip)];\n        if (this.props.selectedRelease.ReleaseNumber === '2.3.0') {\n            total.push(3876)\n        } else {\n            let temp =this.state.release.TcAggregate.allGUI.All - (this.state.release.TcAggregate.allGUI.NotApplicable + this.state.release.TcAggregate.allGUI.Skip)\n            total.push(temp);\n        }\n        let length = 3\n        let tcSummaryy = {data,total,options,length}\n        this.setState({tcSummary : tcSummaryy})\n    }\n    render() {\n        if(this.state.release.TcAggregate){\n            var allGUI = this.state.release.TcAggregate.allGUI\n            var allCLI = this.state.release.TcAggregate.all\n            var needToRun = this.state.release.TcAggregate.all.Tested.auto.Fail + this.state.release.TcAggregate.all.Tested.manual.Fail + this.state.release.TcAggregate.all.NotTested\n\n        }\n        // if(this.props.selectedRelease.TcAggregate){\n        //     var allGUI = this.props.selectedRelease.TcAggregate.allGUI\n        // }\n        let featuresCount = 0;\n        let featuresStatusDict = {'Open': { total: 0 },'Resolved': { total: 0 },'Others': { total: 0 } }\n        let statusScenarios = { Open: { total: 0 }, Resolved: { total: 0 }};\n        if (this.props.feature && this.props.feature.issues) {\n            featuresCount = this.props.feature.issues.length;\n            this.props.feature.issues.forEach(item => {\n                if(item.fields.status.name !== 'In Progress'){\n                    if (statusScenarios[item.fields.status.name]) {\n                        statusScenarios[item.fields.status.name].total += 1;\n                    } else {\n                        statusScenarios[item.fields.status.name] = { total: 1 }\n                    }\n\n                }\n            })\n        }\n\n        if (this.props.feature && this.props.feature.issues) {\n            featuresCount = this.props.feature.issues.length;\n            this.props.feature.issues.forEach(item => {\n                if(item.fields.status.name == 'In Progress' || item.fields.status.name == 'To Do'|| item.fields.status.name == 'Open' ) {\n                    featuresStatusDict['Open'].total += 1;\n                }\n                else if(item.fields.status.name == 'Resolved'){\n                    featuresStatusDict['Resolved'].total += 1;\n                }\n                else{\n                    featuresStatusDict['Others'].total += 1;\n\n                }\n            })\n        }\n\n        let priorities = ['P0', 'P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7'].map(item => ({ value: item, selected: this.state.selectedPriority && this.state.selectedPriority.includes(item) }));\n        let multiselect = { 'Priorities': priorities, };\n        let tcSkipped = `CLI: ${this.props.tcStrategy ? this.props.tcStrategy.skipped : 0 } GUI: 0`;\n        let tcNA = `CLI: ${this.props.tcStrategy ? this.props.tcStrategy.notApplicable : 0 } GUI: 0`;\n        let tcAutomated = `CLI: ${this.props.tcStrategy ? this.props.tcStrategy.totalAutomated : 0 } GUI: 0`;\n        if(this.state.tableApi)\n        {\n            return (\n                <div className=\"main-container\">\n                    <Row>\n                        <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            {\n                                <div className='rp-app-table-header'>\n\n                                    <div className='rp-app-table-title'>\n                                        <div className='rp-icon-button'><i className=\"fa fa-gg-circle\"></i></div><span>Basic Info</span>\n                                        {\n                                            this.props.currentUser && this.props.currentUser.isAdmin && this.state.basic.editOptions && this.state.basic.editOptions.length ?\n                                                this.state.basic.editing ?\n                                                    <Fragment>\n                                                        <Button title=\"Save\" size=\"md\" color=\"transparent\" className=\"float-right rp-rb-save-btn\" onClick={() => this.toggle()} >\n                                                            <i className=\"fa fa-save\"></i>\n                                                        </Button>\n                                                        <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.reset()} >\n                                                            <i className=\"fa fa-undo\"></i>\n                                                        </Button>\n                                                    </Fragment>\n                                                    :\n                                                    <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.setState({ basic: { ...this.state.basic, editing: true } })} >\n                                                        <i className=\"fa fa-pencil-square-o\"></i>\n                                                    </Button>\n                                                : null\n                                        }\n                                    </div>\n                                </div>\n                            }\n\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n\n                                    {\n\n                                        [\n                                            { key: 'Target Date', field: 'TargetedReleaseDate', value: this.props.selectedRelease.TargetedReleaseDate, type: 'date' },\n                                            { key: 'Actual Date', field: 'ActualReleaseDate', value: this.props.selectedRelease.ActualReleaseDate, type: 'date' },\n                                            { key: 'Buisness Units', field: 'BuList', value: this.props.selectedRelease.BuList ? this.props.selectedRelease.BuList.join(',') : '' },\n                                            { key: 'Release Number', field: 'RelNum', value: this.props.selectedRelease.RelNum, type: 'text' },\n                                            { key: 'Server Type Supported', field: 'ServerType', value: this.props.selectedRelease.ServerType ? this.props.selectedRelease.ServerType.join(',') : '' },\n                                            { key: 'Card Type Supported', field: 'CardType', value: this.props.selectedRelease.CardType ? this.props.selectedRelease.CardType.join(',') : '' },\n                                            { key: 'Intended Customers', field: 'Customers', value: this.props.selectedRelease.Customers ? this.props.selectedRelease.Customers.join(',') : '' },\n                                            { key: 'Total Features', restrictEdit: true, field: 'Total Features', value: featuresCount },\n                                            { key: 'Operating System', value: this.props.selectedRelease.FinalOS, field: 'FinalOS' },\n                                            { key: 'Kubernetes', value: this.props.selectedRelease.KubernetesVersion , field: 'KubernetesVersion' },\n                                            //{ key: 'Docker', value: this.props.selectedRelease.DockerVersion , field: 'DockerVersion' },\n                                            { key: 'Runtime', field: 'Runtime', value: this.props.selectedRelease.Runtime ? this.props.selectedRelease.Runtime.join(',') : '' },\n                                            { key: 'Helm', value: this.props.selectedRelease.HelmVersion , field: 'HelmVersion' },\n                                            { key: 'fixVersion', value: this.props.selectedRelease.fixVersion , field: 'fixVersion' },\n                                            { key: 'epicLink', value: this.props.selectedRelease.epicLink , field: 'epicLink' },\n                                        ].map((item, index) => {\n                                            return (\n                                                <tr>\n                                                    <React.Fragment>\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {this.state.basic.editing && !item.restrictEdit &&\n                                                            <td>\n                                                                <Input\n                                                                    type={item.type ? item.type : 'text'}\n                                                                    key={index}\n                                                                    onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, [item.field]: e.target.value } } })}\n                                                                    placeholder={this.props.selectedRelease[item.field]}\n                                                                    value={this.state.basic.updated[item.field] !== undefined ?\n                                                                        this.state.basic.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n                                                                />\n                                                            </td>\n                                                        }\n\n                                                        {\n                                                            !this.state.basic.editing && !item.restrictEdit &&\n                                                            this.props.selectedRelease[item.field] !== undefined &&\n                                                            Array.isArray(this.props.selectedRelease[item.field]) &&\n                                                            <td>{\n                                                                this.props.selectedRelease[item.field].map((_item, index) => {\n                                                                    return index === this.props.selectedRelease[item.field].length - 1 ?\n                                                                        <span className=''>{_item}</span> :\n                                                                        <span className=''>{_item + \" , \"}</span>\n                                                                })\n                                                            }</td>\n                                                        }\n                                                        {!this.state.basic.editing && !item.restrictEdit &&\n                                                            <td>{this.props.selectedRelease[item.field] !== undefined && !Array.isArray(this.props.selectedRelease[item.field]) && this.props.selectedRelease[item.field]}</td>\n                                                        }\n                                                        {!this.state.basic.editing && !item.restrictEdit &&\n                                                            <td>{this.props.selectedRelease[item.field] === undefined && ''}</td>\n                                                        }\n\n                                                        {\n                                                            item.restrictEdit && <td>{item.value}</td>\n                                                        }\n                                                    </React.Fragment>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </Table>\n                            {\n                                !this.state.basic.open &&\n                                <div style={{ textAlign: 'right' }}>\n                                    <i className=\"fa fa-angle-down rp-rs-down-arrow\" onClick={() => this.setState({ basic: { ...this.state.basic, open: !this.state.basic.open } })}> More</i>\n                                </div>\n                            }\n                            {\n                                this.state.basic.open &&\n                                <div style={{ textAlign: 'right' }}>\n                                    <i className=\"fa fa-angle-up rp-rs-down-arrow\" onClick={() => this.setState({ basic: { ...this.state.basic, open: !this.state.basic.open } })}> Less</i>\n                                </div>\n                            }\n\n\n\n                            <Collapse isOpen={this.state.basic.open}>\n                                <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                    <tbody>\n                                        {\n                                            [\n                                                { key: 'Final Build Number', field: 'BuildNumber', value: this.props.selectedRelease.BuildNumber ? this.props.selectedRelease.BuildNumber : '' },\n                                                { key: 'UBoot Number', value: this.props.selectedRelease.UbootVersion, field: 'UbootVersion' },\n                                                { key: 'Docker Core RPM Number', value: this.props.selectedRelease.FinalDockerCore, field: 'FinalDockerCore' },\n                                            ].map((item, index) => {\n                                                return (\n                                                    <tr>\n\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {this.state.basic.editing &&\n                                                            <td>\n                                                                <Input\n                                                                    type={item.type ? item.type : 'text'}\n                                                                    key={index}\n                                                                    onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, [item.field]: e.target.value } } })}\n                                                                    placeholder={this.props.selectedRelease[item.field]}\n                                                                    value={this.state.basic.updated[item.field] !== undefined ?\n                                                                        this.state.basic.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n\n                                                                />\n                                                            </td>\n                                                        }\n                                                        {\n                                                            !this.state.basic.editing && !item.restrictEdit &&\n                                                            this.props.selectedRelease[item.field] !== undefined &&\n                                                            Array.isArray(this.props.selectedRelease[item.field]) &&\n                                                            <td>{\n                                                                this.props.selectedRelease[item.field].map(item => <Badge className='rp-array-badge'>{item}</Badge>)\n                                                            }</td>\n                                                        }\n                                                        {!this.state.basic.editing && !item.restrictEdit &&\n                                                            <td>{this.props.selectedRelease[item.field] !== undefined && !Array.isArray(this.props.selectedRelease[item.field]) && this.props.selectedRelease[item.field]}</td>\n                                                        }\n                                                        {!this.state.basic.editing && !item.restrictEdit &&\n                                                            <td>{this.props.selectedRelease[item.field] === undefined && ''}</td>\n                                                        }\n\n                                                        {\n                                                            item.restrictEdit && <td>{item.value}</td>\n                                                        }\n\n\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </Table>\n                            </Collapse>\n                        </Col>\n                        <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            <div className='rp-app-table-header'>\n                                <div className='rp-icon-button'><i className=\"fa fa-bars\"></i></div><span className='rp-app-table-title'>Release Status</span>\n                            </div>\n\n                            <Table scroll responsive style={{ overflow: 'hidden', }}>\n                                <tbody>\n                                    <tr style={{ cursor: 'pointer' }} onClick={() => {\n                                        this.props.statusPage({ featureOpen: false, buildOpen: false, bugOpen: true, graphsOpen: false });\n                                        this.props.history.push('/release/status');\n\n                                    }}>\n                                        <td className='rp-app-table-key' style={{ maxWidth: '3rem', width: '0%' }}>\n                                            Bug Status\n                                        </td>\n                                        <td style={{ width: '0%', }}>\n                                            <div class=\"row\">\n                                                {\n                                                    this.props.bug && this.props.bug.bugCount && Object.keys(this.props.bug.bugCount.all).map((item, index) =>\n                                                        <div class=\"col-sm-3\">\n                                                            <div className={`c-callout c-callout-${item.toLowerCase()}`}>\n                                                                <small class=\"text-muted\">{item.toUpperCase()}</small><br></br>\n                                                                <strong class=\"h4\">{this.props.bug.bugCount.all[item]}</strong>\n                                                            </div>\n                                                        </div>\n                                                    )\n                                                }\n                                            </div>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                            <Table scroll responsive style={{ overflow: 'hidden', }}>\n                                <tbody>\n                                    <tr style={{ cursor: 'pointer' }} onClick={() => this.setState({ featureOpen: !this.state.featureOpen })}>\n                                        <td className='rp-app-table-key' style={{ maxWidth: '3rem', width: '0%' }}>\n                                            Feature Status\n                                        </td>\n                                        <td style={{ width: '0%' }}>\n                                            {\n                                                <div class=\"row\">\n                                                    <div class=\"col-sm-3\">\n                                                        <div className={`c-callout c-callout-total`}>\n                                                            <small class=\"text-muted\">TOTAL</small><br></br>\n                                                            <strong class=\"h4\">{featuresCount}</strong>\n                                                        </div>\n                                                    </div>\n                                                    {\n                                                        Object.keys(featuresStatusDict).map(item =>\n                                                            <div class=\"col-sm-3\">\n                                                                <div className={`c-callout c-callout-${item.toLowerCase()}`}  >\n                                                                    <small class=\"text-muted\">{item.toUpperCase()}</small><br></br>\n                                                                    <strong class=\"h4\">{featuresStatusDict[item].total}</strong>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    }\n                                                </div>\n                                            }\n\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                            <Collapse isOpen={this.state.featureOpen}>\n                                <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                    <thead>\n                                        <tr>\n                                            <th>Feature</th>\n                                            <th>Summary</th>\n                                            <th>Status</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            this.props.feature && this.props.feature.issues &&\n                                            this.props.feature.issues.map(item => {\n                                                return (\n                                                    <tr style={{ cursor: 'pointer' }} onClick={() => {\n                                                        this.getFeatureDetails(item.self)\n\n                                                    }}>\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        <td>{item.fields.summary}</td>\n                                                        <td>\n                                                            <div className={`c-callout c-callout-open rp-new-badge`}>\n                                                                <strong class=\"h5\">{item.fields.status.name}</strong>\n                                                            </div>\n                                                        </td>\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </Table>\n                            </Collapse>\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n                                    <tr>\n                                        <td className='rp-app-table-key' style={{ maxWidth: '2rem' }}>\n                                            Current Build Number\n                                        </td>\n                                        <td>\n                                            {this.props.selectedRelease && this.props.selectedRelease.ReleaseNumber === '2.3.0' ? 101 : 'Not Available'}\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                        </Col>\n                    </Row>\n                    <Row>\n                        {/* <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            <div className='rp-app-table-header'>\n                                <Link to={'/release/qastrategy'}>\n                                    <div className='rp-icon-button'><i className=\"fa fa-cogs\"></i></div><span className='rp-app-table-title'>QA Strategy</span>\n                                </Link>\n                                {\n                                    this.props.currentUser && this.props.currentUser.isAdmin && this.state.qaStrategy.editOptions && this.state.qaStrategy.editOptions.length ?\n                                        this.state.qaStrategy.editing ?\n                                            <Fragment>\n                                                <Button title=\"Save\" size=\"md\" color=\"transparent\" className=\"float-right rp-rb-save-btn\" onClick={() => this.toggle()} >\n                                                    <i className=\"fa fa-save\"></i>\n                                                </Button>\n                                                <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.reset()} >\n                                                    <i className=\"fa fa-undo\"></i>\n                                                </Button>\n                                            </Fragment>\n                                            :\n                                            <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.setState({ qaStrategy: { ...this.state.qaStrategy, editing: true } })} >\n                                                <i className=\"fa fa-pencil-square-o\"></i>\n                                            </Button>\n                                        : null\n                                }\n                            </div>\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases (All)</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.totalTests : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI  ? allGUI.All : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Not Applicable</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.notApplicable : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.NotApplicable : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                                                                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Skipped from Release</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.skipped : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.Skip : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                                                                                                                    {\n                                        // <tr>\n                                        //     <td className='rp-app-table-key'>Test Cases Skipped while Testing</td>\n                                        //     <td>\n                                        //         <table>\n                                        //             <tbody>\n                                        //                 <tr>\n                                        //                     <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.SkipAndTested : 0}</span></td>\n                                        //                     <td style={{ borderTop: '0px'}}><span>GUI: {allGUI ? allGUI.SkippedWhileTesting : 0}</span></td>\n                                        //                 </tr>\n                                        //             </tbody>\n                                        //         </table>\n                                        //     </td>\n                                        // </tr>\n                                    }\n                                                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Automated</td>\n                                            <td>\n                                                <table>\n                                                    <tbody>\n                                                        <tr>\n                                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.totalAutomated : 0}</span></td>\n                                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.Automated : 0}</span></td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                    {\n                                        [\n                                            { key: 'QA Start Date', field: 'QAStartDate', value: this.props.selectedRelease.QAStartDate, type: 'date' },\n                                            { key: 'Target Code Freeze Date', field: 'TargetedCodeFreezeDate', value: this.props.selectedRelease.TargetedCodeFreezeDate, type: 'date' },\n\n                                        ].map((item, index) => {\n                                            return (\n                                                <tr>\n                                                    <React.Fragment>\n\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {this.state.qaStrategy.editing && !item.restrictEdit ?\n                                                            <td>\n                                                                <Input\n                                                                    type={item.type ? item.type : 'text'}\n                                                                    key={index}\n                                                                    onChange={(e) => this.setState({ qaStrategy: { ...this.state.qaStrategy, updated: { ...this.state.qaStrategy.updated, [item.field]: e.target.value } } })}\n                                                                    placeholder={this.props.selectedRelease[item.field]}\n                                                                    value={\n\n                                                                        this.state.qaStrategy.updated[item.field] !== undefined ?\n                                                                            this.state.qaStrategy.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n\n                                                                />\n                                                                {\n                                                                    item.field === 'QARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.state.qaStrategy.updated[item.field]} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n                                                            </td> :\n                                                            <td>\n\n                                                                {\n                                                                    !this.state.basic.editing && !item.restrictEdit &&\n                                                                    this.props.selectedRelease[item.field] !== undefined &&\n                                                                    Array.isArray(this.props.selectedRelease[item.field]) &&\n                                                                    <span>{\n                                                                        this.props.selectedRelease[item.field].map(item => <Badge className='rp-array-badge'>item</Badge>)\n                                                                    }</span>\n                                                                }\n                                                                {!this.state.basic.editing && !item.restrictEdit &&\n                                                                    <span>{this.props.selectedRelease[item.field] !== undefined && !Array.isArray(this.props.selectedRelease[item.field]) && this.props.selectedRelease[item.field]}</span>\n                                                                }\n                                                                {!this.state.basic.editing && !item.restrictEdit &&\n                                                                    <span>{this.props.selectedRelease[item.field] === undefined && ''}</span>\n                                                                }\n\n                                                                {item.restrictEdit && item.value}\n                                                                {\n                                                                    item.field === 'QARateOfProgress' && <span>%</span>\n                                                                }\n                                                                {\n                                                                    item.field === 'QARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.props.selectedRelease[item.field]} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n                                                            </td>\n                                                        }\n                                                    </React.Fragment>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                    {\n                                        [\n                                            { key: 'Setups Used', restrictEdit: false, field: 'SetupsUsed', value: this.props.selectedRelease.SetupsUsed ? this.props.selectedRelease.SetupsUsed.length : 0 },\n                                            { key: 'Engineers', restrictEdit: false, field: 'Engineers', value: this.props.selectedRelease.Engineers ? this.props.selectedRelease.Engineers.length : 0 },\n                                            { key: 'Upgrade Metrics', restrictEdit: false, field: 'UpgradeMetrics', value: this.props.selectedRelease.UpgradeMetrics ? this.props.selectedRelease.UpgradeMetrics.length : 0 }\n                                        ].map(item =>\n                                            <React.Fragment>\n                                                <tr>\n                                                    <td className='rp-app-table-key'>{item.key}\n                                                        {\n                                                            !this.state.qaStrategy.editing &&\n                                                            <span style={{ 'marginLeft': '0.5rem' }}>(Total: {item.value})</span>\n                                                        }\n                                                    </td>\n                                                    {\n                                                        this.state.qaStrategy.editing &&\n                                                        <td>\n                                                            <Input type='textarea' rows='2'\n                                                                value={\n                                                                    this.state.qaStrategy.updated[item.field] !== undefined ?\n                                                                        this.state.qaStrategy.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n                                                                onChange={(e) => this.setState({ qaStrategy: { ...this.state.qaStrategy, updated: { ...this.state.qaStrategy.updated, [item.field]: e.target.value } } })}\n                                                            >\n                                                            </Input>\n                                                        </td>\n                                                    }\n                                                    {\n                                                        !this.state.qaStrategy.editing &&\n                                                        <td style={{ wordBreak: 'break-word' }}>\n                                                            <span >{Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : ''}</span>\n                                                        </td>\n                                                    }\n\n                                                </tr>\n                                            </React.Fragment>\n                                        )\n\n                                    }\n                                </tbody>\n                            </Table>\n                        </Col> */}\n                        <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            <div className='rp-app-table-header'>\n                                <Link to={'/release/qastrategy'}>\n                                    <div className='rp-icon-button'><i className=\"fa fa-cogs\"></i></div><span className='rp-app-table-title'>QA Strategy</span>\n                                </Link>\n                                {\n                                    this.props.currentUser && this.props.currentUser.isAdmin && this.state.qaStrategy.editOptions && this.state.qaStrategy.editOptions.length ?\n                                        this.state.qaStrategy.editing ?\n                                            <Fragment>\n                                                <Button title=\"Save\" size=\"md\" color=\"transparent\" className=\"float-right rp-rb-save-btn\" onClick={() => this.toggle()} >\n                                                    <i className=\"fa fa-save\"></i>\n                                                </Button>\n                                                <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.reset()} >\n                                                    <i className=\"fa fa-undo\"></i>\n                                                </Button>\n                                            </Fragment>\n                                            :\n                                            <Button size=\"md\" color=\"transparent\" className=\"float-right\" onClick={() => this.setState({ qaStrategy: { ...this.state.qaStrategy, editing: true } })} >\n                                                <i className=\"fa fa-pencil-square-o\"></i>\n                                            </Button>\n                                        : null\n                                }\n                            </div>\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases (All)</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {allCLI ? allCLI.All : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI  ? allGUI.All : 0}</span></td>\n\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Applicable</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {allCLI ? allCLI.All - allCLI.NotApplicable - allCLI.Skip : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.All - allGUI.NotApplicable - allGUI.Skip : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Not Applicable</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {allCLI ? allCLI.NotApplicable : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.NotApplicable : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                                                                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Skipped from Release</td>\n                                            <td>\n                                            <table>\n                                            <tbody>\n                                            <tr>\n                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {allCLI ? allCLI.Skip : 0}</span></td>\n                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.Skip : 0}</span></td>\n                                                </tr>\n                                            </tbody>\n                                            </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                                                                                                                    {\n                                        // <tr>\n                                        //     <td className='rp-app-table-key'>Test Cases Skipped while Testing</td>\n                                        //     <td>\n                                        //         <table>\n                                        //             <tbody>\n                                        //                 <tr>\n                                        //                     <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {this.props.tcStrategy ? this.props.tcStrategy.SkipAndTested : 0}</span></td>\n                                        //                     <td style={{ borderTop: '0px'}}><span>GUI: {allGUI ? allGUI.SkippedWhileTesting : 0}</span></td>\n                                        //                 </tr>\n                                        //             </tbody>\n                                        //         </table>\n                                        //     </td>\n                                        // </tr>\n                                    }\n                                                                    {\n                                        <tr>\n                                            <td className='rp-app-table-key'>Test Cases Automated</td>\n                                            <td>\n                                                <table>\n                                                    <tbody>\n                                                        <tr>\n                                                            <td style={{ borderTop: '0px', width: '7rem'}}><span>CLI: {allCLI ? allCLI.Automated : 0}</span></td>\n                                                            <td style={{ borderTop: '0px'}}><span>UI: {allGUI ? allGUI.Automated : 0}</span></td>\n                                                        </tr>\n                                                    </tbody>\n                                                </table>\n                                            </td>\n                                        </tr>\n                                    }\n                                    {\n                                        [\n                                            { key: 'QA Start Date', field: 'QAStartDate', value: this.props.selectedRelease.QAStartDate, type: 'date' },\n                                            { key: 'QA End Date', field: 'QAEndDate', value: this.props.selectedRelease.QAEndDate, type: 'date' },\n                                            { key: 'Target Code Freeze Date', field: 'TargetedCodeFreezeDate', value: this.props.selectedRelease.TargetedCodeFreezeDate, type: 'date' },\n\n                                        ].map((item, index) => {\n                                            return (\n                                                <tr>\n                                                    <React.Fragment>\n\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {this.state.qaStrategy.editing && !item.restrictEdit ?\n                                                            <td>\n                                                                <Input\n                                                                    type={item.type ? item.type : 'text'}\n                                                                    key={index}\n                                                                    onChange={(e) => this.setState({ qaStrategy: { ...this.state.qaStrategy, updated: { ...this.state.qaStrategy.updated, [item.field]: e.target.value } } })}\n                                                                    placeholder={this.props.selectedRelease[item.field]}\n                                                                    value={\n\n                                                                        this.state.qaStrategy.updated[item.field] !== undefined ?\n                                                                            this.state.qaStrategy.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n\n                                                                />\n                                                                {\n                                                                    item.field === 'QARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.state.qaStrategy.updated[item.field]} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n                                                            </td> :\n                                                            <td>\n\n                                                                {\n                                                                    !this.state.basic.editing && !item.restrictEdit &&\n                                                                    this.props.selectedRelease[item.field] !== undefined &&\n                                                                    Array.isArray(this.props.selectedRelease[item.field]) &&\n                                                                    <span>{\n                                                                        this.props.selectedRelease[item.field].map(item => <Badge className='rp-array-badge'>item</Badge>)\n                                                                    }</span>\n                                                                }\n                                                                {!this.state.basic.editing && !item.restrictEdit &&\n                                                                    <span>{this.props.selectedRelease[item.field] !== undefined && !Array.isArray(this.props.selectedRelease[item.field]) && this.props.selectedRelease[item.field]}</span>\n                                                                }\n                                                                {!this.state.basic.editing && !item.restrictEdit &&\n                                                                    <span>{this.props.selectedRelease[item.field] === undefined && ''}</span>\n                                                                }\n\n                                                                {item.restrictEdit && item.value}\n                                                                {\n                                                                    item.field === 'QARateOfProgress' && <span>%</span>\n                                                                }\n                                                                {\n                                                                    item.field === 'QARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.props.selectedRelease[item.field]} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n                                                            </td>\n                                                        }\n                                                    </React.Fragment>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                    {\n                                        [\n                                            { key: 'Setups Used', restrictEdit: false, field: 'SetupsUsed', value: this.props.selectedRelease.SetupsUsed ? this.props.selectedRelease.SetupsUsed.length : 0 },\n                                            { key: 'Engineers', restrictEdit: false, field: 'Engineers', value: this.props.selectedRelease.Engineers ? this.props.selectedRelease.Engineers.length : 0 },\n                                            { key: 'Upgrade Metrics', restrictEdit: false, field: 'UpgradeMetrics', value: this.props.selectedRelease.UpgradeMetrics ? this.props.selectedRelease.UpgradeMetrics.length : 0 }\n                                        ].map(item =>\n                                            <React.Fragment>\n                                                <tr>\n                                                    <td className='rp-app-table-key'>{item.key}\n                                                        {\n                                                            !this.state.qaStrategy.editing &&\n                                                            <span style={{ 'marginLeft': '0.5rem' }}>(Total: {item.value})</span>\n                                                        }\n                                                    </td>\n                                                    {\n                                                        this.state.qaStrategy.editing &&\n                                                        <td>\n                                                            <Input type='textarea' rows='2'\n                                                                value={\n                                                                    this.state.qaStrategy.updated[item.field] !== undefined ?\n                                                                        this.state.qaStrategy.updated[item.field] : (this.props.selectedRelease[item.field] ? Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : this.props.selectedRelease[item.field] : '')}\n                                                                onChange={(e) => this.setState({ qaStrategy: { ...this.state.qaStrategy, updated: { ...this.state.qaStrategy.updated, [item.field]: e.target.value } } })}\n                                                            >\n                                                            </Input>\n                                                        </td>\n                                                    }\n                                                    {\n                                                        !this.state.qaStrategy.editing &&\n                                                        <td style={{ wordBreak: 'break-word' }}>\n                                                            <span >{Array.isArray(this.props.selectedRelease[item.field]) ? this.props.selectedRelease[item.field].join(',') : ''}</span>\n                                                        </td>\n                                                    }\n\n                                                </tr>\n                                            </React.Fragment>\n                                        )\n\n                                    }\n                                </tbody>\n                            </Table>\n                        </Col>\n                        {/* <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            <div className='rp-app-table-header'>\n                                <Link to={'/release/qastatus'}>\n                                    <div className='rp-icon-button'><i className=\"fa fa-area-chart\"></i></div><span className='rp-app-table-title'>QA Status</span>\n                                </Link>\n                            </div>\n                                <div className=\"chart-wrapper\" style={{ textAlign: \"center\" }}>\n                                    <div class='row'>\n                                        <div class='col-md-6'>\n                                            {\n                                                this.props.tcSummary &&\n                                                <div className='rp-app-table-key'>\n                                                    <span>CLI ({this.props.tcSummary.total[0]})</span>\n                                                    <span>\n                                                            <Button  size=\"sm\" style={{backgroundColor: '#2eb85c', borderRadius: '50%', marginLeft: '0.5rem'}} id=\"PopoverAssign\" type=\"button\">\n                                                                P\n                                                            </Button>\n                                                            <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target=\"PopoverAssign\" id=\"PopoverAssignButton\"  toggle={() => this.popoverToggle()} isOpen={this.state.popoverOpen}>\n                                                                <PopoverBody>\n                                                                <div><Multiselect buttonClass='rp-app-multiselect-button' onChange={(e, checked, select) => this.selectMultiselect('Priorities', e, checked, select)}\n                                                data={multiselect['Priorities']} multiple /></div>\n                                                                    </PopoverBody>\n                                                                    </UncontrolledPopover>\n                                                                    </span>\n                                                </div>\n                                            }\n                                            <Link to={'/release/qastatus'}>\n                                            <div>\n                                                <HorizontalBar height={180} data={this.props.tcSummary && this.props.tcSummary.data[0]} options={stackedBarChartOptions} label=\"2345\"></HorizontalBar>\n                                            </div>\n                                            </Link>\n                                            </div>\n                                        <div class='col-md-6'>\n                                            {\n                                                this.props.tcSummary &&\n                                                <div className='rp-app-table-key'>\n                                                    <span>UI ({this.props.tcSummary.total[1]})</span>\n                                                    <span>\n                                                            <Button  size=\"sm\" style={{backgroundColor: '#2eb85c', borderRadius: '50%', marginLeft: '0.5rem'}} id=\"PopoverAssign1\" type=\"button\">\n                                                                P\n                                                            </Button>\n                                                            <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target=\"PopoverAssign1\" id=\"PopoverAssignButton1\"  toggle={() => this.popoverToggleGUI()} isOpen={this.state.popoverOpengui}>\n                                                                <PopoverBody>\n                                                                <div><Multiselect buttonClass='rp-app-multiselect-button' onChange={(e, checked, select) => this.selectMultiselect('Priorities', e, checked, select)}\n                                                data={multiselect['Priorities']} multiple /></div>\n                                                                    </PopoverBody>\n                                                                    </UncontrolledPopover>\n                                                                    </span>\n                                                </div>\n                                            }\n                                            <Link to={'/release/qastatus'}>\n                                                <div>\n                                                    <HorizontalBar height={180} data={this.props.tcSummary && this.props.tcSummary.data[1]} options={stackedBarChartOptions}></HorizontalBar>\n                                                </div>\n                                            </Link>\n                                        </div>\n                                    </div>\n                                </div>\n\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n                                    {\n                                        [\n                                            { key: 'Test Cases required to run again', restrictEdit: true, field: 'run', value: this.props.tcStrategy ? this.props.tcStrategy.needToRun : 0 },\n                                        ].map((item, index) => {\n                                            return (\n                                                <tr>\n                                                    <React.Fragment>\n\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {\n                                                            <td style={{ width: '10rem' }}>\n\n                                                                {item.value}\n                                                                {\n                                                                    item.field === 'ActualQARateOfProgress' && <span>%</span>\n                                                                }\n                                                                {\n                                                                    item.field === 'ActualQARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.props.selectedRelease.ReleaseNumber === '2.3.0' ? 87.85 : 0} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n\n                                                            </td>\n                                                        }\n                                                    </React.Fragment>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </Table>\n                            {\n                                this.props.selectedRelease && this.props.selectedRelease.ReleaseNumber === '2.3.0' &&\n                                <React.Fragment>\n                                    <div className=\"chart-wrapper mx-3\" style={{ height: '15rem' }}>\n                                        <Line data={chartData[this.state.cardType]} options={chartOptions[this.state.cardType]} height={250} />\n                                    </div>\n                                    <div class='row'>\n                                        <div class='col-md-3'>\n                                            <FormGroup style={{ marginLeft: '0.5rem' }}>\n                                                <Label htmlFor=\"selectRelease\" className='rp-app-table-key'>Card Type</Label>\n\n                                                <Input onChange={(e) => this.setState({ cardType: e.target.value })} type=\"select\" name=\"selectRelease\" id=\"selectRelease\">\n                                                    <option value='BOS'>BOS</option>\n                                                    <option value='NYNJ'>NYNJ</option>\n                                                    <option value='COMMON'>COMMON</option>\n                                                </Input>\n\n\n                                            </FormGroup>\n                                        </div>\n                                        <div class='col-md-5'>\n                                            <div className='rp-app-table-key' style={{\n                                                marginLeft: '0.5rem',\n                                                textAlign: 'center',\n                                                marginTop: '0.2rem',\n                                                marginBottom: '0.5rem'\n                                            }}>Weekly Rate of Progress (%)</div>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            }\n                        </Col> */}\n                    <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\" className=\"rp-summary-tables\">\n                            <div className='rp-app-table-header'>\n                                <Link to={'/release/qastatus'}>\n                                    <div className='rp-icon-button'><i className=\"fa fa-area-chart\"></i></div><span className='rp-app-table-title'>QA Status</span>\n                                </Link>\n                            </div>\n                                <div className=\"chart-wrapper\" style={{ textAlign: \"center\" }}>\n                                {\n                                    this.state.tcSummary.length ?\n                                    <div class='row'>\n                                        <div class='col-md-6'>\n                                            {\n                                                this.state.tcSummary &&\n                                                <div className='rp-app-table-key'>\n                                                    <span>CLI ({this.state.tcSummary.total[0]})</span>\n                                                    <span>\n                                                            <Button  size=\"sm\" style={{backgroundColor: '#2eb85c', borderRadius: '50%', marginLeft: '0.5rem'}} id=\"PopoverAssign\" type=\"button\">\n                                                                P\n                                                            </Button>\n                                                            <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target=\"PopoverAssign\" id=\"PopoverAssignButton\"  toggle={() => this.popoverToggle()} isOpen={this.state.popoverOpen}>\n                                                                <PopoverBody>\n                                                                <div><Multiselect buttonClass='rp-app-multiselect-button' onChange={(e, checked, select) => this.selectMultiselect('Priorities', e, checked, select)}\n                                                data={multiselect['Priorities']} multiple /></div>\n                                                                    </PopoverBody>\n                                                                    </UncontrolledPopover>\n                                                                    </span>\n                                                </div>\n                                            }\n                                            <Link to={'/release/qastatus'}>\n                                            <div>\n                                                <HorizontalBar height={180} data={this.state.tcSummary.data[0] } options={stackedBarChartOptions} label=\"2345\"></HorizontalBar>\n                                            </div>\n                                            </Link>\n                                            </div>\n                                        <div class='col-md-6'>\n                                            {\n                                                this.state.tcSummary &&\n                                                <div className='rp-app-table-key'>\n                                                    <span>UI ({this.state.tcSummary.total[1]})</span>\n                                                    <span>\n                                                            <Button  size=\"sm\" style={{backgroundColor: '#2eb85c', borderRadius: '50%', marginLeft: '0.5rem'}} id=\"PopoverAssign1\" type=\"button\">\n                                                                P\n                                                            </Button>\n                                                            <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" target=\"PopoverAssign1\" id=\"PopoverAssignButton1\"  toggle={() => this.popoverToggleGUI()} isOpen={this.state.popoverOpengui}>\n                                                                <PopoverBody>\n                                                                <div><Multiselect buttonClass='rp-app-multiselect-button' onChange={(e, checked, select) => this.selectMultiselect('Priorities', e, checked, select)}\n                                                data={multiselect['Priorities']} multiple /></div>\n                                                                    </PopoverBody>\n                                                                    </UncontrolledPopover>\n                                                                    </span>\n                                                </div>\n                                            }\n                                            <Link to={'/release/qastatus'}>\n                                                <div>\n                                                    <HorizontalBar height={180} data={this.state.tcSummary.data[1]} options={stackedBarChartOptions}></HorizontalBar>\n                                                </div>\n                                            </Link>\n                                        </div>\n                                    </div>: 0\n                                }\n                                </div>\n\n                            <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                <tbody>\n                                    {\n                                        [\n                                            { key: 'Test Cases required to run again', restrictEdit: true, field: 'run', value: needToRun ? needToRun : 0 },\n                                        ].map((item, index) => {\n                                            return (\n                                                <tr>\n                                                    <React.Fragment>\n\n                                                        <td className='rp-app-table-key'>{item.key}</td>\n                                                        {\n\n                                                            <td style={{ width: '10rem' }}>\n\n                                                                {item.value}\n                                                                {\n                                                                    item.field === 'ActualQARateOfProgress' && <span>%</span>\n                                                                }\n                                                                {\n                                                                    item.field === 'ActualQARateOfProgress' &&\n                                                                    <div>\n                                                                        <div className=\"progress-group\">\n                                                                            <div className=\"progress-group-bars\">\n                                                                                <Progress className=\"progress-xs\" color=\"warning\" value={this.props.selectedRelease.ReleaseNumber === '2.3.0' ? 87.85 : 0} />\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                }\n\n                                                            </td>\n                                                        }\n                                                    </React.Fragment>\n\n                                                </tr>\n                                            )\n                                        })\n                                    }\n                                </tbody>\n                            </Table>\n                            {\n                                this.props.selectedRelease && this.props.selectedRelease.ReleaseNumber === '2.3.0' &&\n                                <React.Fragment>\n                                    <div className=\"chart-wrapper mx-3\" style={{ height: '15rem' }}>\n                                        <Line data={chartData[this.state.cardType]} options={chartOptions[this.state.cardType]} height={250} />\n                                    </div>\n                                    <div class='row'>\n                                        <div class='col-md-3'>\n                                            <FormGroup style={{ marginLeft: '0.5rem' }}>\n                                                <Label htmlFor=\"selectRelease\" className='rp-app-table-key'>Card Type</Label>\n\n                                                <Input onChange={(e) => this.setState({ cardType: e.target.value })} type=\"select\" name=\"selectRelease\" id=\"selectRelease\">\n                                                    <option value='BOS'>BOS</option>\n                                                    <option value='NYNJ'>NYNJ</option>\n                                                    <option value='COMMON'>COMMON</option>\n                                                </Input>\n\n\n                                            </FormGroup>\n                                        </div>\n                                        <div class='col-md-5'>\n                                            <div className='rp-app-table-key' style={{\n                                                marginLeft: '0.5rem',\n                                                textAlign: 'center',\n                                                marginTop: '0.2rem',\n                                                marginBottom: '0.5rem'\n                                            }}>Weekly Rate of Progress (%)</div>\n                                        </div>\n                                    </div>\n                                </React.Fragment>\n                            }\n                        </Col>\n                    </Row>\n\n                    <Row>\n\n                    </Row>\n                    <Modal isOpen={this.state.modal} toggle={() => this.toggle()}>\n                        <ModalHeader toggle={() => this.toggle()}>Confirmation</ModalHeader>\n                        <ModalBody>\n                            Are you sure you want to make the changes?\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={() => this.save()}>Ok</Button>{' '}\n                            <Button color=\"secondary\" onClick={() => this.toggle()}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div >\n            )\n        }\n        else{\n            return(\n                <div>\n                            <div class=\"container\" style={{ 'margin-top': '1rem' }}>\n                                <h5>Loading...</h5>\n                            </div>\n                </div>\n               )\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    currentUser: state.auth.currentUser,\n    selectedRelease: getCurrentRelease(state, state.release.current.id),\n    //tcSummary: getTCForStatus(state, state.release.current.id),\n    //tcStrategy: getTCForStrategy(state, state.release.current.id),\n    feature: state.feature.all[state.release.current.id],\n    bug: state.bug.all[state.release.current.id],\n}\n)\n\n\nexport default connect(mapStateToProps, { updateSelectedPriority, saveReleaseBasicInfo, statusPage, saveFeatures, saveBugs, saveSingleFeature })(ReleaseSummary);\n"],"sourceRoot":""}