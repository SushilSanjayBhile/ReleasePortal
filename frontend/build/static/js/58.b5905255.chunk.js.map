{"version":3,"sources":["views/Release/components/BasicReleaseInfo.js","views/Release/ManageRelease.js"],"names":["BasicReleaseInfo","props","_this","Object","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","row","className","reactstrap__WEBPACK_IMPORTED_MODULE_10__","xs","lg","reactstrap__WEBPACK_IMPORTED_MODULE_11__","htmlFor","isEditing","reactstrap__WEBPACK_IMPORTED_MODULE_12__","type","id","name","placeholder","onChange","e","handleUpdate","TargetedReleaseDate","target","value","readOnly","basicReleaseInfo","TargetedCodeFreezeDate","TargetedQATestingDate","TargetedUpgradeTestingDate","reactstrap__WEBPACK_IMPORTED_MODULE_13__","FinalOS","UbootVersion","FinalDockerCore","Component","connect","ownProps","currentUser","auth","release","all","filter","item","ReleaseNumber","ManageRelease","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","toggle","setState","modal","delToggle","delModal","allReleases","updatedValues","basic","editing","updated","open","isAdmin","history","push","axios","delete","concat","then","res","alert","deleteRelease","error","save","data","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","selectedRelease","_this3","formattedDates","forEach","date","Date","toISOString","split","substring","length","formattedArrays","Array","isArray","console","log","isNaN","QARateOfProgress","parseInt","post","single","get","saveReleaseBasicInfo","releaseChange","reset","_this4","react__WEBPACK_IMPORTED_MODULE_7___default","style","marginLeft","marginTop","map","reactstrap__WEBPACK_IMPORTED_MODULE_14__","onClick","size","color","marginRight","sm","title","confirmToggle","md","reactstrap__WEBPACK_IMPORTED_MODULE_15__","scroll","responsive","overflow","key","field","index","Fragment","_home_abhijeet_Desktop_blackwidow1088_QA_Analysis_website_front_end_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","reactstrap__WEBPACK_IMPORTED_MODULE_16__","isOpen","reactstrap__WEBPACK_IMPORTED_MODULE_17__","reactstrap__WEBPACK_IMPORTED_MODULE_18__","reactstrap__WEBPACK_IMPORTED_MODULE_19__","confirm"],"mappings":"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","file":"static/js/58.b5905255.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    Col,\n    FormGroup,\n    Input,\n    Label,\n    Row\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nclass BasicReleaseInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Card>\n                    <CardHeader>\n                        Target Dates of Release\n                </CardHeader>\n                    <CardBody>\n                        <FormGroup row className=\"my-0\">\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetReleaseDate\">Release Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetReleaseDate\" name=\"targetReleaseDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedReleaseDate} /> :\n                                            <Input type=\"date\" id=\"targetReleaseDate\" name=\"targetReleaseDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedReleaseDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetCodeFreezeDate\">Code Freeze Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetCodeFreezeDate\" name=\"targetCodeFreezeDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedCodeFreezeDate} /> :\n                                            <Input type=\"date\" id=\"targetCodeFreezeDate\" name=\"targetCodeFreezeDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedCodeFreezeDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetQATestingDate\">QA Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetQATestingDate\" name=\"targetQATestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedQATestingDate} /> :\n                                            <Input type=\"date\" id=\"targetQATestingDate\" name=\"targetQATestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedQATestingDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"12\" lg=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"targetUpgradeTestingDate\">Upgrade Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"targetUpgradeTestingDate\" name=\"targetUpgradeTestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.TargetedUpgradeTestingDate} /> :\n                                            <Input type=\"date\" id=\"targetUpgradeTestingDate\" name=\"targetUpgradeTestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ TargetedUpgradeTestingDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                        </FormGroup>\n                    </CardBody>\n                </Card>\n                <div>\n                    <Row>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"Operating System\">Operating System</Label>\n                                {\n                                    <Input type=\"text\" id=\"Operating\" name=\"Operating\" onChange={(e) => this.props.handleUpdate({ FinalOS: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"UBoot Number\">UBoot Number</Label>\n                                {\n\n                                    <Input type=\"text\" id=\"UbootVersion\" name=\"UbootVersion\" onChange={(e) => this.props.handleUpdate({ UbootVersion: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"12\" lg=\"3\">\n                            <FormGroup>\n                                <Label htmlFor=\"Docker Core RPM Number\">Docker Core RPM Number</Label>\n                                {\n\n                                    <Input type=\"text\" id=\"FinalDockerCore\" name=\"FinalDockerCore\" onChange={(e) => this.props.handleUpdate({ FinalDockerCore: e.target.value })} />\n                                }\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </div>\n\n                {/* \n                { key: 'Operating System', value: this.props.selectedRelease.FinalOS },\n                                            { key: 'Docker Core RPM Number', value: this.props.selectedRelease.FinalDockerCore },\n                                            { key: 'UBoot Number', value: this.props.selectedRelease.UbootVersion },\n                                            { key: 'Build Number', value: this.props.selectedRelease.BuildNumber ? this.props.selectedRelease.BuildNumber : '' },\n                                            { key: 'Customers', value: this */}\n                {/* <Card>\n                    <CardHeader>\n                        Actual Dates of Release\n                                        </CardHeader>\n                    <CardBody>\n                        <FormGroup row className=\"my-0\">\n                            <Col xs=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"actualReleaseDate\">Release Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"actualReleaseDate\" name=\"actualReleaseDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.ActualReleaseDate} /> :\n                                            <Input type=\"date\" id=\"actualReleaseDate\" name=\"actualReleaseDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ ActualReleaseDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"actualCodeFreezeDate\">Code Freeze Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"actualCodeFreezeDate\" name=\"actualCodeFreezeDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.ActualCodeFreezeDate} /> :\n                                            <Input type=\"date\" id=\"actualCodeFreezeDate\" name=\"actualCodeFreezeDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ ActualCodeFreezeDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"actualQATestingDate\">QA Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"actualQATestingDate\" name=\"actualQATestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.QAStartDate} /> :\n                                            <Input type=\"date\" id=\"actualQATestingDate\" name=\"actualQATestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ QAStartDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"3\">\n                                <FormGroup>\n                                    <Label htmlFor=\"actualUpgradeTestingDate\">Upgrade Testing Date</Label>\n                                    {\n                                        !this.props.isEditing ?\n                                            <Input readOnly={true} type=\"date\" id=\"actualUpgradeTestingDate\" name=\"actualUpgradeTestingDate\" placeholder=\"date\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.UpgradeTestingStartDate} /> :\n                                            <Input type=\"date\" id=\"actualUpgradeTestingDate\" name=\"actualUpgradeTestingDate\" placeholder=\"date\" onChange={(e) => this.props.handleUpdate({ UpgradeTestingStartDate: e.target.value })} />\n                                    }\n                                </FormGroup>\n                            </Col>\n                        </FormGroup>\n                    </CardBody>\n                </Card> */}\n                {/* <Row>\n                    <Col md=\"6\" lg=\"6\">\n                        <Label htmlFor=\"risksRedFlags\">Risks/Red Flags</Label>\n                        {\n                            !this.props.isEditing ?\n                                <Input readOnly={true} type=\"textarea\" name=\"risksRedFlags\" id=\"risksRedFlags\" rows=\"12\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.RedFlagsRisks}\n                                    placeholder=\"Content...\" /> :\n                                <Input type=\"textarea\" name=\"risksRedFlags\" id=\"risksRedFlags\" rows=\"5\" onChange={(e) => this.props.handleUpdate({ RedFlagsRisks: e.target.value })}\n                                    placeholder=\"Content...\" />\n\n                        }\n                    </Col>\n                    <Col md=\"6\" lg=\"6\">\n                        <Label htmlFor=\"AutomationSyncUp\">Automation Sync Up</Label>\n                        {\n                            !this.props.isEditing ?\n                                <Input readOnly={true} type=\"textarea\" name=\"AutomationSyncUp\" id=\"AutomationSyncUp\" rows=\"12\" value={this.props.basicReleaseInfo && this.props.basicReleaseInfo.AutomationSyncUp}\n                                    placeholder=\"Content...\" /> :\n                                <Input type=\"textarea\" name=\"AutomationSyncUp\" id=\"AutomationSyncUp\" rows=\"5\" onChange={(e) => this.props.handleUpdate({ AutomationSyncUp: e.target.value })}\n                                    placeholder=\"Content...\" />\n\n                        }\n                    </Col>\n\n                </Row> */}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state, ownProps) => ({\n    currentUser: state.auth.currentUser,\n    basicReleaseInfo: state.release.all.filter(item => {\n        if (item.ReleaseNumber === ownProps.id) {\n            return true;\n        } else {\n            return false;\n        }\n    })[0] //.filter(item => item.name === ownProps.match.params.id)\n})\n\nexport default connect(mapStateToProps, {})(BasicReleaseInfo);\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n    Badge,\n    Button,\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    Col,\n    Collapse,\n    DropdownItem,\n    DropdownMenu,\n    DropdownToggle,\n    Fade,\n    Form,\n    FormGroup,\n    FormText,\n    FormFeedback,\n    Input,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupButtonDropdown,\n    InputGroupText,\n    Label,\n    Row,\n    Modal, ModalHeader, ModalBody, ModalFooter,\n    Table\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { saveReleaseBasicInfo, deleteRelease, releaseChange } from '../../actions';\nimport BasicReleaseInfo from './components/BasicReleaseInfo';\nimport './ManageRelease.scss';\nimport { api } from '../../utils/API.utils';\n\nclass ManageRelease extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            release: this.props.allReleases[0] ? this.props.allReleases[0].ReleaseNumber : '',\n            updatedValues: {},\n            basic: { editing: false, updated: {}, open: false },\n        }\n        if (!this.props.currentUser || (this.props.currentUser && !this.props.currentUser.isAdmin)) {\n            this.props.history.push('/');\n        }\n    }\n    reset() {\n        this.setState({\n            release: this.props.allReleases[0] ? this.props.allReleases[0].ReleaseNumber : '',\n            updatedValues: {},\n            basic: { editing: false, updated: {}, open: false },\n        })\n    }\n    delete() {\n        axios.delete(`/api/release/${this.state.release}`)\n            .then(res => {\n                alert(`successfully deleted ${this.state.release}`);\n                this.props.deleteRelease({ id: this.state.release });\n            }, error => {\n                alert('error deleting release');\n            });\n        this.delToggle();\n    }\n    // save() {\n    //     let data = { ...this.state.updatedValues }\n    //     console.log('saved data ', data);\n    //     // axios.post(`/api/release`, { ...data })\n    //     //     .then(res => {\n    //     //         alert('success');\n    //     //         this.props.saveReleaseBasicInfo({ id: data.ReleaseNumber, data: data });\n    //     //         this.reset();\n    //     //     }, error => {\n    //     //         alert('error adding new release');\n    //     //     });\n    //     if (this.state.modal) {\n    //         this.toggle();\n    //     }\n    //     if (this.state.momModal) {\n    //         this.momToggle();\n    //     }\n    // }\n    // save() {\n    //     let data = { ...this.state.updatedValues }\n    //     let dates = [\n    //         'TargetedReleaseDate', 'ActualReleaseDate', 'TargetedCodeFreezeDate',\n    //         'UpgradeTestingStartDate', 'QAStartDate', 'ActualCodeFreezeDate', 'TargetedQAStartDate'\n    //     ]\n    //     let formattedDates = {};\n    //     dates.forEach(item => {\n    //         if (data[item]) {\n    //             let date = new Date(data[item]);\n    //             formattedDates[item] = date.toISOString()\n    //         }\n    //     })\n    //     data = { ...data, ...formattedDates };\n    //     console.log('saved data ', data);\n    //     axios.post(`/api/release`, { ...data })\n    //         .then(res => {\n    //             alert('success');\n    //             this.props.saveReleaseBasicInfo({ id: data.ReleaseNumber, data: data });\n    //             this.setState({ isEditing: false });\n    //         }, error => {\n    //             alert('error in updating');\n    //         });\n    //     if (this.state.modal) {\n    //         this.toggle();\n    //     }\n    //     if (this.state.momModal) {\n    //         this.momToggle();\n    //     }\n    // }\n    confirm() {\n        this.save();\n    }\n    confirmToggle() {\n        let data = { ...this.props.selectedRelease, ...this.state.basic.updated }\n        if (!data || (data && !data.ReleaseNumber)) {\n            alert('Please Add Release Number');\n            return;\n        }\n        this.toggle();\n    }\n    save() {\n        let data = { ...this.props.selectedRelease, ...this.state.basic.updated }\n        let dates = [\n            'TargetedReleaseDate', 'ActualReleaseDate', 'TargetedCodeFreezeDate',\n            'UpgradeTestingStartDate', 'QAStartDate', 'ActualCodeFreezeDate', 'TargetedQAStartDate'\n        ]\n        let formattedDates = {};\n        dates.forEach(item => {\n            if (data[item]) {\n                let date = new Date(data[item]).toISOString().split('T');\n                formattedDates[item] = `${date[0]} ${date[1].substring(0, date[1].length-1)}`;\n            }\n        });\n        data = { ...data, ...formattedDates };\n        let arrays = [\n            'ServerType', 'CardType', 'BuildNumberList', 'SetupsUsed', 'UpgradeMetrics', 'Customers', 'Engineers',\n        ]\n        let formattedArrays = {};\n        arrays.forEach(item => {\n            if (!data[item]) {\n                formattedArrays[item] = [];\n            }\n            if (data[item] && !Array.isArray(data[item])) {\n                formattedArrays[item] = data[item].split(',');\n            }\n        })\n        console.log('priority ')\n        data = { ...data, ...formattedArrays };\n        if (isNaN(data.QARateOfProgress)) {\n            data.QARateOfProgress = 0;\n        } else {\n            data.QARateOfProgress = parseInt(data.QARateOfProgress);\n        }\n        if (!data.QARateOfProgress) {\n            data.QARateOfProgress = 0;\n        }\n        axios.post(`/api/release`, { ...data })\n            .then(single => {\n                alert('successfully added the release');\n                this.props.history.push('/release/summary');\n                axios.get(`/api/release/all`)\n                    .then(res => {\n                        \n                        res.data.forEach(item => {\n                            // this.props.updateNavBar({ id: item.ReleaseNumber });\n\n                            this.props.saveReleaseBasicInfo({ id: item.ReleaseNumber, data: item });\n                        });\n                        this.props.releaseChange({ id: data.ReleaseNumber })\n                        // if (res.data[res.data.length - 1]) {\n                        //     this.props.releaseChange({ id: res.data[res.data.length - 1].ReleaseNumber });\n                        // }\n                       \n                        this.reset();\n                    }, error => {\n                    });\n            }, error => {\n                alert('error in updating');\n            });\n        if (this.state.modal) {\n            this.toggle();\n        }\n    }\n    toggle = () => this.setState({ modal: !this.state.modal });\n    delToggle = () => this.setState({ delModal: !this.state.delModal });\n    render() {\n        return (\n            (\n                <div style={{ marginLeft: '1rem', marginTop: '1rem' }}>\n                    <Row>\n                        <Col xs=\"4\">\n                            <FormGroup>\n                                <Label htmlFor=\"selectRelease\">Release</Label>\n                                <Input onChange={(e) => this.setState({ release: e.target.value })} type=\"select\" name=\"selectRelease\" id=\"selectRelease\">\n                                    {\n                                        this.props.allReleases.map(release => <option value={release.ReleaseNumber}>{release.ReleaseNumber}</option>)\n                                    }\n                                </Input>\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"4\">\n                            <Button onClick={() => this.delToggle()} size=\"sm\" color=\"danger\" className=\"rp-mr-del-button\"><i className=\"fa fa-ban\" style={{\n                                'color': 'white',\n                                'marginRight': '0.5rem'\n                            }}></i> Delete</Button>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs=\"12\" sm=\"12\" lg=\"10\" className=\"rp-summary-tables\" style={{ marginLeft: '1rem', marginTop: '1rem' }}>\n                            <div className='rp-app-table-header'>\n                                <span className='rp-app-table-title'>Add Release</span>\n                                <Button title=\"Save\" size=\"md\" color=\"transparent\" className=\"float-right rp-rb-save-btn\" onClick={() => this.confirmToggle()} >\n                                    <i className=\"fa fa-check-square-o\"></i>\n                                </Button>\n                            </div>\n                            <Row>\n                                <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\">\n                                    <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                        <tbody>\n\n                                            {\n\n                                                [\n                                                    { key: 'Release Number', value: '', field: 'ReleaseNumber' },\n                                                    { key: 'Operating System', value: '', field: 'FinalOS' },\n                                                    { key: 'Docker Core RPM Number', value: '', field: 'FinalDockerCore' },\n                                                    { key: 'Build Number', field: 'BuildNumber', value: '' },\n\n                                                ].map((item, index) => {\n                                                    return (\n                                                        <tr>\n                                                            <React.Fragment>\n                                                                <td className='rp-app-table-key'>{item.key}</td>\n\n                                                                <td>\n                                                                    <Input\n                                                                        type={item.type ? item.type : 'text'}\n                                                                        key={index}\n                                                                        onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, [item.field]: e.target.value } } })}\n                                                                        placeholder={'Add ' + item.key}\n                                                                        value={this.state.basic.updated[item.field]}\n                                                                    />\n                                                                </td>\n\n\n                                                            </React.Fragment>\n\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                    <div className='rp-rs-hw-support'>Hardware Support</div>\n                                    <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                        <tbody>\n                                            {\n                                                [\n                                                    { key: 'Server Type', field: 'ServerType', value: '' },\n                                                    { key: 'Card Type', field: 'CardType', value: '' },\n                                                ].map((item, index) => {\n                                                    return (\n                                                        <tr>\n                                                            <React.Fragment>\n                                                                <td className='rp-app-table-key'>{item.key}</td>\n                                                                <td>\n                                                                    <Input\n                                                                        type={item.type ? item.type : 'text'}\n                                                                        key={index}\n                                                                        onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, [item.field]: e.target.value } } })}\n                                                                        placeholder={'Add ' + item.key}\n                                                                        value={this.state.basic.updated[item.field]}\n                                                                    />\n                                                                </td>\n                                                            </React.Fragment>\n\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                </Col>\n                                <Col xs=\"12\" sm=\"12\" md=\"5\" lg=\"5\">\n                                    <Table scroll responsive style={{ overflow: 'scroll', }}>\n                                        <tbody>\n                                            {\n                                                [\n                                                    { key: 'UBoot Number', value: '', field: 'UbootVersion' },\n                                                    { key: 'Customers', field: 'Customers', value: '' },\n                                                    { key: 'Target Date', field: 'TargetedReleaseDate', value: '', type: 'date' },\n\n                                                ].map((item, index) => {\n                                                    return (\n                                                        <tr>\n                                                            <React.Fragment>\n                                                                <td className='rp-app-table-key'>{item.key}</td>\n\n                                                                <td>\n                                                                    <Input\n                                                                        type={item.type ? item.type : 'text'}\n                                                                        key={index}\n                                                                        onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, [item.field]: e.target.value } } })}\n                                                                        placeholder={'Add ' + item.key}\n                                                                        value={this.state.basic.updated[item.field]}\n                                                                    />\n                                                                </td>\n\n\n                                                            </React.Fragment>\n\n                                                        </tr>\n                                                    )\n                                                })\n                                            }\n                                            {/* <tr>\n                                                <React.Fragment>\n                                                    <td className='rp-app-table-key'>Priority</td>\n\n                                                    <td>\n                                                        <Input type=\"select\" id=\"Priority\" name=\"Priority\" value={this.state.basic.updated.Priority}\n                                                            onChange={(e) => this.setState({ basic: { ...this.state.basic, updated: { ...this.state.basic.updated, Priority: e.target.value } } })}>\n                                                            <option value=''>Select Priority</option>\n                                                            {\n\n                                                                ['P0','P1', 'P2', 'P3', 'P4', 'P5', 'P6', 'P7', 'P8', 'P9'].map(item =>\n                                                                    <option value={item}>{item}</option>\n                                                                )\n                                                            }\n                                                        </Input>\n                                                    </td>\n\n\n                                                </React.Fragment>\n\n                                            </tr> */}\n                                        </tbody>\n                                    </Table>\n                                </Col>\n                            </Row>\n\n                            {/* <Card>\n                                <CardHeader>\n                                    <strong>Add New Release</strong>\n                                </CardHeader>\n                                <CardBody>\n                                    <FormGroup>\n                                        <Label htmlFor=\"release\">Release</Label>\n                                        <Input type=\"text\" id=\"release\" placeholder=\"Enter Release Name\" value={this.state.updatedValues.ReleaseNumber} onChange={(e) => this.setState({ updatedValues: { ...this.state.updatedValues, ReleaseNumber: e.target.value } })} />\n                                    </FormGroup>\n                                    <BasicReleaseInfo id={this.props.id} isEditing={true} handleUpdate={(value) => this.setState({ updatedValues: { ...this.state.updatedValues, ...value } })} />\n                                </CardBody>\n                                <CardFooter>\n                                    <div className=\"form-actions\">\n                                        <Button color=\"primary\" onClick={() => this.toggle()}>Save changes</Button>\n                                    </div>\n                                </CardFooter>\n                            </Card> */}\n                        </Col>\n                    </Row>\n                    <Modal isOpen={this.state.modal} toggle={() => this.toggle()}>\n                        <ModalHeader toggle={() => this.toggle()}>Confirmation</ModalHeader>\n                        <ModalBody>\n                            Are you sure you want to make the changes?\n                    </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={() => this.confirm()}>Ok</Button>{' '}\n                            <Button color=\"secondary\" onClick={() => this.toggle()}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                    <Modal isOpen={this.state.delModal} toggle={() => this.delToggle()}>\n                        <ModalHeader toggle={() => this.delToggle()}>Confirmation</ModalHeader>\n                        <ModalBody>\n                            {`Are you sure you want to delete release ${this.state.release}?`}\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={() => this.delete()}>Delete</Button>{' '}\n                            <Button color=\"secondary\" onClick={() => this.delToggle()}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div >\n            )\n        )\n    }\n}\nconst mapStateToProps = (state, ownProps) => ({\n    currentUser: state.auth.currentUser,\n    allReleases: state.release.all\n})\n\nexport default connect(mapStateToProps, { saveReleaseBasicInfo, deleteRelease, releaseChange })(ManageRelease);"],"sourceRoot":""}